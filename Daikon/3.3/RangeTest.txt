===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.expected():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.expected():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
com.sun.proxy.$Proxy2.timeout():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.timeout():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return == 0
===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator:::CLASS
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE has only one value
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES has only one value
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator[].class
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] elements has only one value
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] elements != null
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.Range.ComparableComparator]
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.Range.ComparableComparator.class
size(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[]) == 1
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] elements == org.apache.commons.lang3.Range$ComparableComparator.INSTANCE
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE in org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[]
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator:::OBJECT
this == org.apache.commons.lang3.Range$ComparableComparator.INSTANCE
this has only one value
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] elements == this
this in org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[]
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator.ComparableComparator(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "INSTANCE"
$hidden$2 == 0
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator.ComparableComparator(java.lang.String, int):::EXIT
$hidden$1.toString == "INSTANCE"
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator.compare(java.lang.Object, java.lang.Object):::ENTER
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName() != obj1.getClass().getName()
obj1.getClass().getName() == obj2.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator.compare(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE == orig(this)
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE == orig(org.apache.commons.lang3.Range$ComparableComparator.INSTANCE)
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES == orig(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES)
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] == orig(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[])
return <= 1
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName() != orig(obj1.getClass().getName())
return <= size(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[])
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator.values():::ENTER
===========================================================================
org.apache.commons.lang3.Range$ComparableComparator.values():::EXIT
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE == orig(org.apache.commons.lang3.Range$ComparableComparator.INSTANCE)
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES == orig(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES)
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] == return[]
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[] == orig(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES[])
return has only one value
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.Range$ComparableComparator.ENUM$VALUES.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range:::CLASS
===========================================================================
org.apache.commons.lang3.Range:::OBJECT
this.comparator != null
this.minimum != null
this.maximum != null
this.hashCode >= 0
org.apache.commons.lang3.Range.serialVersionUID != this.hashCode
this.comparator.getClass().getName() != this.minimum.getClass().getName()
this.minimum.getClass().getName() == this.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.Range(java.lang.Object, java.lang.Object, java.util.Comparator):::ENTER
element1 != null
element2 != null
element1.getClass().getName() == element2.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.Range(java.lang.Object, java.lang.Object, java.util.Comparator):::EXIT
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(comparator.getClass().getName())
this.minimum.getClass().getName() == orig(element1.getClass().getName())
this.minimum.getClass().getName() == orig(element2.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.between(java.lang.Comparable, java.lang.Comparable):::ENTER
fromInclusive != null
toInclusive != null
fromInclusive.getClass().getName() == toInclusive.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.between(java.lang.Comparable, java.lang.Comparable):::EXIT
return != null
return.comparator has only one value
return.comparator != null
return.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
return.minimum != null
return.maximum != null
return.hashCode == 0
return.toString == null
return.comparator.getClass().getName() != return.minimum.getClass().getName()
return.minimum.getClass().getName() == return.maximum.getClass().getName()
return.minimum.getClass().getName() == orig(fromInclusive.getClass().getName())
return.minimum.getClass().getName() == orig(toInclusive.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.between(java.lang.Object, java.lang.Object, java.util.Comparator):::ENTER
fromInclusive != null
toInclusive != null
fromInclusive.getClass().getName() == toInclusive.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.between(java.lang.Object, java.lang.Object, java.util.Comparator):::EXIT
return != null
return.comparator != null
return.minimum != null
return.maximum != null
return.hashCode == 0
return.toString == null
return.comparator.getClass().getName() != return.minimum.getClass().getName()
return.comparator.getClass().getName() == orig(comparator.getClass().getName())
return.minimum.getClass().getName() == return.maximum.getClass().getName()
return.minimum.getClass().getName() == orig(fromInclusive.getClass().getName())
return.minimum.getClass().getName() == orig(toInclusive.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::ENTER
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() != element.getClass().getName()
this.minimum.getClass().getName() == element.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT220
this.toString == orig(element)
this.minimum.getClass().getName() == java.lang.Integer.class
return == false
orig(element) == null
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT220;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT222
return == true
orig(element) != null
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT222;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT223
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
return == false
orig(element) != null
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT223;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
(return == true)  ==>  (orig(element) != null)
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.comparator.getClass().getName() != orig(element.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT;condition="return == true"
return == true
orig(element) != null
===========================================================================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::ENTER
this.comparator == otherRange.comparator
this.hashCode == otherRange.hashCode
this.toString == otherRange.toString
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum.getClass().getName() == java.lang.Integer.class
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT315
return == false
orig(otherRange) == null
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT315;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT317
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
return == true
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT317;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT318
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
return == false
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT318;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT
this.comparator == otherRange.comparator
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == otherRange.hashCode
this.hashCode == orig(this.hashCode)
this.toString == otherRange.toString
this.toString == orig(this.toString)
otherRange.comparator == orig(otherRange.comparator)
otherRange.minimum == orig(otherRange.minimum)
otherRange.maximum == orig(otherRange.maximum)
otherRange.hashCode == orig(otherRange.hashCode)
otherRange.toString == orig(otherRange.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum.getClass().getName() == java.lang.Integer.class
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
otherRange.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
otherRange.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT;condition="return == true"
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
return == true
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.containsRange(org.apache.commons.lang3.Range):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.elementCompareTo(java.lang.Object):::ENTER
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
this.minimum.getClass().getName() == element.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.elementCompareTo(java.lang.Object):::EXIT293
return == -1
orig(element) has only one value
===========================================================================
org.apache.commons.lang3.Range.elementCompareTo(java.lang.Object):::EXIT295
org.apache.commons.lang3.Range.serialVersionUID == return
orig(element) has only one value
===========================================================================
org.apache.commons.lang3.Range.elementCompareTo(java.lang.Object):::EXIT297
this.hashCode == return
return == orig(this.hashCode)
return == 0
===========================================================================
org.apache.commons.lang3.Range.elementCompareTo(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
return one of { -1, 0, 1 }
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() != obj.getClass().getName()
this.minimum.getClass().getName() != obj.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT409
orig(this) == orig(obj)
return == true
orig(obj.getClass().getName()) == org.apache.commons.lang3.Range.class
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT409;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT411
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Byte.class
this.maximum has only one value
return == false
orig(this) has only one value
orig(obj.getClass().getName()) == java.lang.String.class
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT411;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT416
return == true
orig(obj.getClass().getName()) == org.apache.commons.lang3.Range.class
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT416;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT417
return == false
orig(obj.getClass().getName()) == org.apache.commons.lang3.Range.class
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT417;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
(return == true)  ==>  (orig(obj) != null)
(return == true)  ==>  (orig(obj.getClass().getName()) == org.apache.commons.lang3.Range.class)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.comparator.getClass().getName() != orig(obj.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() != orig(obj.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
orig(obj) != null
orig(obj.getClass().getName()) == org.apache.commons.lang3.Range.class
===========================================================================
org.apache.commons.lang3.Range.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.getComparator():::ENTER
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
===========================================================================
org.apache.commons.lang3.Range.getComparator():::EXIT
this.comparator == return
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
return == orig(this.comparator)
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
return has only one value
return.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.comparator.getClass().getName() == return.getClass().getName()
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
return.getClass().getName() == orig(this.comparator.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.getMaximum():::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
===========================================================================
org.apache.commons.lang3.Range.getMaximum():::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == return
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
return == orig(this.maximum)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == return.getClass().getName()
this.maximum.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.minimum.getClass().getName())
return.getClass().getName() == orig(this.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.getMinimum():::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
===========================================================================
org.apache.commons.lang3.Range.getMinimum():::EXIT
this.comparator == orig(this.comparator)
this.minimum == return
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
return == orig(this.minimum)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == return.getClass().getName()
this.maximum.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.minimum.getClass().getName())
return.getClass().getName() == orig(this.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.hashCode():::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode one of { 0, 127865079, 127865464 }
this.toString == null
===========================================================================
org.apache.commons.lang3.Range.hashCode():::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == return
this.toString == orig(this.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.toString == null
return one of { 127865079, 127865084, 127865464 }
org.apache.commons.lang3.Range.serialVersionUID < return
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
orig(this.hashCode) % return == 0
return >= orig(this.hashCode)
===========================================================================
org.apache.commons.lang3.Range.intersectionWith(org.apache.commons.lang3.Range):::ENTER
this.comparator == other.comparator
this.hashCode == other.hashCode
this.toString == other.toString
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == other.comparator.getClass().getName()
this.minimum.getClass().getName() == other.minimum.getClass().getName()
this.minimum.getClass().getName() == other.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.intersectionWith(org.apache.commons.lang3.Range):::EXIT387
this.minimum == other.minimum
this.minimum == orig(other.minimum)
this.maximum == other.maximum
this.maximum == return.maximum
this.maximum == orig(other.maximum)
return == orig(this)
return == orig(other)
===========================================================================
org.apache.commons.lang3.Range.intersectionWith(org.apache.commons.lang3.Range):::EXIT391
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
other.minimum has only one value
other.maximum has only one value
return has only one value
orig(this) has only one value
orig(other) has only one value
===========================================================================
org.apache.commons.lang3.Range.intersectionWith(org.apache.commons.lang3.Range):::EXIT
this.comparator == other.comparator
this.comparator == return.comparator
this.comparator == orig(this.comparator)
this.comparator == orig(other.comparator)
this.minimum == return.minimum
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == other.hashCode
this.hashCode == return.hashCode
this.hashCode == orig(this.hashCode)
this.hashCode == orig(other.hashCode)
this.toString == other.toString
this.toString == return.toString
this.toString == orig(this.toString)
this.toString == orig(other.toString)
other.minimum == orig(other.minimum)
other.maximum == return.maximum
other.maximum == orig(other.maximum)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == other.comparator.getClass().getName()
this.comparator.getClass().getName() == return.comparator.getClass().getName()
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.comparator.getClass().getName() == orig(other.comparator.getClass().getName())
this.minimum.getClass().getName() == other.minimum.getClass().getName()
this.minimum.getClass().getName() == other.maximum.getClass().getName()
this.minimum.getClass().getName() == return.minimum.getClass().getName()
this.minimum.getClass().getName() == return.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(other.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(other.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.is(java.lang.Comparable):::ENTER
===========================================================================
org.apache.commons.lang3.Range.is(java.lang.Comparable):::EXIT
return.minimum == return.maximum
return.minimum == orig(element)
return.comparator has only one value
return.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
return.hashCode == 0
return.toString == null
return.minimum.getClass().getName() == return.maximum.getClass().getName()
return.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.is(java.lang.Object, java.util.Comparator):::ENTER
element has only one value
element.getClass().getName() == java.lang.Integer.class
comparator has only one value
comparator.getClass().getName() == org.apache.commons.lang3.RangeTest$2.class
===========================================================================
org.apache.commons.lang3.Range.is(java.lang.Object, java.util.Comparator):::EXIT
return.comparator == orig(comparator)
return.minimum == return.maximum
return.minimum == orig(element)
return has only one value
return.comparator has only one value
return.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest$2.class
return.minimum has only one value
return.minimum.getClass().getName() == java.lang.Integer.class
return.hashCode == 0
return.toString == null
return.comparator.getClass().getName() == orig(comparator.getClass().getName())
return.minimum.getClass().getName() == return.maximum.getClass().getName()
return.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
element.getClass().getName() == java.lang.Integer.class
this.comparator.getClass().getName() != element.getClass().getName()
this.minimum.getClass().getName() == element.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT233
this.toString == orig(element)
return == false
orig(this) has only one value
orig(element) == null
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT233;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT235
return == true
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT235;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT236
return == false
orig(element) != null
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT236;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.comparator.getClass().getName() != orig(element.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.Range.isAfter(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::ENTER
this.comparator == otherRange.comparator
this.hashCode == otherRange.hashCode
this.toString == otherRange.toString
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum.getClass().getName() == java.lang.Integer.class
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT332
return == false
orig(otherRange) == null
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT332;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT334
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
(return == true)  ==>  (orig(otherRange) has only one value)
(return == true)  ==>  (otherRange.maximum has only one value)
(return == true)  ==>  (otherRange.minimum has only one value)
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT334;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT334;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT
this.comparator == otherRange.comparator
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == otherRange.hashCode
this.hashCode == orig(this.hashCode)
this.toString == otherRange.toString
this.toString == orig(this.toString)
otherRange.comparator == orig(otherRange.comparator)
otherRange.minimum == orig(otherRange.minimum)
otherRange.maximum == orig(otherRange.maximum)
otherRange.hashCode == orig(otherRange.hashCode)
otherRange.toString == orig(otherRange.toString)
(orig(otherRange) == null)  ==>  (return == false)
(return == true)  ==>  (orig(otherRange) has only one value)
(return == true)  ==>  (otherRange.maximum has only one value)
(return == true)  ==>  (otherRange.minimum has only one value)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum.getClass().getName() == java.lang.Integer.class
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
otherRange.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
otherRange.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT;condition="return == true"
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
otherRange.minimum has only one value
otherRange.maximum has only one value
return == true
orig(otherRange) has only one value
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isAfterRange(org.apache.commons.lang3.Range):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
element.getClass().getName() == java.lang.Integer.class
this.comparator.getClass().getName() != element.getClass().getName()
this.minimum.getClass().getName() == element.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT272
this.toString == orig(element)
return == false
orig(this) has only one value
orig(element) == null
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT272;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT274
return == true
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT274;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT275
return == false
orig(element) != null
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT275;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.comparator.getClass().getName() != orig(element.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.Range.isBefore(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::ENTER
this.comparator == otherRange.comparator
this.hashCode == otherRange.hashCode
this.toString == otherRange.toString
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum.getClass().getName() == java.lang.Integer.class
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT369
return == false
orig(otherRange) == null
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT369;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT371
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
(return == true)  ==>  (orig(otherRange) has only one value)
(return == true)  ==>  (otherRange.maximum has only one value)
(return == true)  ==>  (otherRange.minimum has only one value)
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT371;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT371;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT
this.comparator == otherRange.comparator
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == otherRange.hashCode
this.hashCode == orig(this.hashCode)
this.toString == otherRange.toString
this.toString == orig(this.toString)
otherRange.comparator == orig(otherRange.comparator)
otherRange.minimum == orig(otherRange.minimum)
otherRange.maximum == orig(otherRange.maximum)
otherRange.hashCode == orig(otherRange.hashCode)
otherRange.toString == orig(otherRange.toString)
(orig(otherRange) == null)  ==>  (return == false)
(return == true)  ==>  (orig(otherRange) has only one value)
(return == true)  ==>  (otherRange.maximum has only one value)
(return == true)  ==>  (otherRange.minimum has only one value)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum.getClass().getName() == java.lang.Integer.class
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
otherRange.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
otherRange.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT;condition="return == true"
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
otherRange.minimum has only one value
otherRange.maximum has only one value
return == true
orig(otherRange) has only one value
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::ENTER
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
element.getClass().getName() == java.lang.Integer.class
this.minimum.getClass().getName() == element.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT259
this.toString == orig(element)
return == false
orig(element) == null
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT259;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT261
this.maximum == orig(element)
return == true
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT261;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT262
return == false
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT262;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
(return == true)  ==>  (orig(element) has only one value)
(return == true)  ==>  (this.maximum == orig(element))
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT;condition="return == true"
this.maximum == orig(element)
return == true
===========================================================================
org.apache.commons.lang3.Range.isEndedBy(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.isNaturalOrdering():::ENTER
this.minimum == this.maximum
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest$1.class
this.hashCode == 0
this.toString == null
===========================================================================
org.apache.commons.lang3.Range.isNaturalOrdering():::EXIT206
===========================================================================
org.apache.commons.lang3.Range.isNaturalOrdering():::EXIT206;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isNaturalOrdering():::EXIT
this.comparator == orig(this.comparator)
this.minimum == this.maximum
this.minimum == orig(this.minimum)
this.minimum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest$1.class
this.hashCode == 0
this.toString == null
return == true
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isNaturalOrdering():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::ENTER
this.comparator == otherRange.comparator
this.hashCode == otherRange.hashCode
this.toString == otherRange.toString
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator != null
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum != null
otherRange.maximum != null
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT351
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
return == false
orig(otherRange) == null
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT351;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT353
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
return == false
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT353;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT354
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
return == true
orig(otherRange) != null
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT354;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT
this.comparator == otherRange.comparator
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == otherRange.hashCode
this.hashCode == orig(this.hashCode)
this.toString == otherRange.toString
this.toString == orig(this.toString)
otherRange.comparator == orig(otherRange.comparator)
otherRange.minimum == orig(otherRange.minimum)
otherRange.maximum == orig(otherRange.maximum)
otherRange.hashCode == orig(otherRange.hashCode)
otherRange.toString == orig(otherRange.toString)
(return == false)  ==>  (otherRange.minimum.getClass().getName() == java.lang.Integer.class)
(return == false)  ==>  (this.maximum has only one value)
(return == false)  ==>  (this.minimum has only one value)
(return == false)  ==>  (this.minimum.getClass().getName() == java.lang.Integer.class)
(return == true)  ==>  (orig(otherRange) != null)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
otherRange.comparator has only one value
otherRange.comparator != null
otherRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
otherRange.minimum != null
otherRange.maximum != null
otherRange.hashCode == 0
otherRange.toString == null
this.comparator.getClass().getName() == otherRange.comparator.getClass().getName()
this.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() != otherRange.comparator.getClass().getName()
this.minimum.getClass().getName() == otherRange.minimum.getClass().getName()
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
otherRange.comparator.getClass().getName() != otherRange.minimum.getClass().getName()
otherRange.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
otherRange.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
otherRange.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
otherRange.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT;condition="return == true"
this.comparator == orig(otherRange.comparator)
this.hashCode == orig(otherRange.hashCode)
this.toString == orig(otherRange.toString)
return == true
orig(otherRange) != null
this.comparator.getClass().getName() == orig(otherRange.comparator.getClass().getName())
this.minimum.getClass().getName() == otherRange.maximum.getClass().getName()
this.minimum.getClass().getName() == orig(otherRange.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(otherRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isOverlappedBy(org.apache.commons.lang3.Range):::EXIT;condition="not(return == true)"
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
otherRange.minimum.getClass().getName() == java.lang.Integer.class
return == false
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::ENTER
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
element.getClass().getName() == java.lang.Integer.class
this.minimum.getClass().getName() == element.getClass().getName()
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT246
this.toString == orig(element)
return == false
orig(element) == null
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT246;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT248
this.minimum == orig(element)
return == true
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT248;condition="return == true"
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT249
return == false
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT249;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
(return == true)  ==>  (orig(element) has only one value)
(return == true)  ==>  (this.minimum == orig(element))
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.minimum.getClass().getName() == orig(element.getClass().getName())
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT;condition="return == true"
this.minimum == orig(element)
return == true
===========================================================================
org.apache.commons.lang3.Range.isStartedBy(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Range.toString():::ENTER
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.toString == null
===========================================================================
org.apache.commons.lang3.Range.toString():::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == return
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.hashCode == 0
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
this.toString.toString == return.toString
===========================================================================
org.apache.commons.lang3.Range.toString(java.lang.String):::ENTER
this has only one value
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
format has only one value
format.toString == "From %1$s to %2$s"
===========================================================================
org.apache.commons.lang3.Range.toString(java.lang.String):::EXIT
this.comparator == orig(this.comparator)
this.minimum == orig(this.minimum)
this.maximum == orig(this.maximum)
this.hashCode == orig(this.hashCode)
this.toString == orig(this.toString)
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == java.lang.Integer.class
this.maximum has only one value
this.hashCode == 0
this.toString == null
format.toString == "From %1$s to %2$s"
return has only one value
return.toString == "From 10 to 20"
this.comparator.getClass().getName() == orig(this.comparator.getClass().getName())
this.minimum.getClass().getName() == orig(this.minimum.getClass().getName())
this.minimum.getClass().getName() == orig(this.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest$1:::OBJECT
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.intRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.longRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.floatRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.intRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.longRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.floatRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange2.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange3.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.intRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.longRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.floatRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.doubleRange.toString
this has only one value
org.apache.commons.lang3.RangeTest.this has only one value
org.apache.commons.lang3.RangeTest.this.byteRange has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
org.apache.commons.lang3.RangeTest.this.byteRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
org.apache.commons.lang3.RangeTest.this.byteRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == 0
org.apache.commons.lang3.RangeTest.this.byteRange.toString == null
org.apache.commons.lang3.RangeTest.this.byteRange2 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum has only one value
org.apache.commons.lang3.RangeTest.this.intRange has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.RangeTest.this.intRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.longRange has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == java.lang.Long.class
org.apache.commons.lang3.RangeTest.this.longRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == java.lang.Float.class
org.apache.commons.lang3.RangeTest.this.floatRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest$1.(org.apache.commons.lang3.RangeTest):::ENTER
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.intRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.longRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.floatRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.intRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.longRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.floatRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange2.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange3.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.intRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.longRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.floatRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.doubleRange.toString
org.apache.commons.lang3.RangeTest.this has only one value
org.apache.commons.lang3.RangeTest.this.byteRange has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
org.apache.commons.lang3.RangeTest.this.byteRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
org.apache.commons.lang3.RangeTest.this.byteRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == 0
org.apache.commons.lang3.RangeTest.this.byteRange.toString == null
org.apache.commons.lang3.RangeTest.this.byteRange2 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum has only one value
org.apache.commons.lang3.RangeTest.this.intRange has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.RangeTest.this.intRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.longRange has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == java.lang.Long.class
org.apache.commons.lang3.RangeTest.this.longRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == java.lang.Float.class
org.apache.commons.lang3.RangeTest.this.floatRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest$1.(org.apache.commons.lang3.RangeTest):::EXIT
org.apache.commons.lang3.RangeTest.this == orig(org.apache.commons.lang3.RangeTest.this)
org.apache.commons.lang3.RangeTest.this.byteRange == orig(org.apache.commons.lang3.RangeTest.this.byteRange)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.intRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.longRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.floatRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.intRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.longRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.floatRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange2 == orig(org.apache.commons.lang3.RangeTest.this.byteRange2)
org.apache.commons.lang3.RangeTest.this.byteRange3 == orig(org.apache.commons.lang3.RangeTest.this.byteRange3)
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum)
org.apache.commons.lang3.RangeTest.this.intRange == orig(org.apache.commons.lang3.RangeTest.this.intRange)
org.apache.commons.lang3.RangeTest.this.intRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum)
org.apache.commons.lang3.RangeTest.this.intRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum)
org.apache.commons.lang3.RangeTest.this.longRange == orig(org.apache.commons.lang3.RangeTest.this.longRange)
org.apache.commons.lang3.RangeTest.this.longRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum)
org.apache.commons.lang3.RangeTest.this.longRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum)
org.apache.commons.lang3.RangeTest.this.floatRange == orig(org.apache.commons.lang3.RangeTest.this.floatRange)
org.apache.commons.lang3.RangeTest.this.floatRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum)
org.apache.commons.lang3.RangeTest.this.floatRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum)
org.apache.commons.lang3.RangeTest.this.doubleRange == orig(org.apache.commons.lang3.RangeTest.this.doubleRange)
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum)
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest$1.compareTo(java.lang.Object):::ENTER
this == other
other has only one value
other.getClass().getName() == org.apache.commons.lang3.RangeTest$1.class
===========================================================================
org.apache.commons.lang3.RangeTest$1.compareTo(java.lang.Object):::EXIT
org.apache.commons.lang3.RangeTest.this == orig(org.apache.commons.lang3.RangeTest.this)
org.apache.commons.lang3.RangeTest.this.byteRange == orig(org.apache.commons.lang3.RangeTest.this.byteRange)
org.apache.commons.lang3.Range.serialVersionUID == return
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.intRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.longRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.floatRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.intRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.longRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.floatRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange2 == orig(org.apache.commons.lang3.RangeTest.this.byteRange2)
org.apache.commons.lang3.RangeTest.this.byteRange3 == orig(org.apache.commons.lang3.RangeTest.this.byteRange3)
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum)
org.apache.commons.lang3.RangeTest.this.intRange == orig(org.apache.commons.lang3.RangeTest.this.intRange)
org.apache.commons.lang3.RangeTest.this.intRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum)
org.apache.commons.lang3.RangeTest.this.intRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum)
org.apache.commons.lang3.RangeTest.this.longRange == orig(org.apache.commons.lang3.RangeTest.this.longRange)
org.apache.commons.lang3.RangeTest.this.longRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum)
org.apache.commons.lang3.RangeTest.this.longRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum)
org.apache.commons.lang3.RangeTest.this.floatRange == orig(org.apache.commons.lang3.RangeTest.this.floatRange)
org.apache.commons.lang3.RangeTest.this.floatRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum)
org.apache.commons.lang3.RangeTest.this.floatRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum)
org.apache.commons.lang3.RangeTest.this.doubleRange == orig(org.apache.commons.lang3.RangeTest.this.doubleRange)
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum)
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest$2:::OBJECT
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.intRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.longRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.floatRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.intRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.longRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.floatRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange2.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange3.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.intRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.longRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.floatRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.doubleRange.toString
this has only one value
org.apache.commons.lang3.RangeTest.this has only one value
org.apache.commons.lang3.RangeTest.this.byteRange has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
org.apache.commons.lang3.RangeTest.this.byteRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
org.apache.commons.lang3.RangeTest.this.byteRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == 0
org.apache.commons.lang3.RangeTest.this.byteRange.toString == null
org.apache.commons.lang3.RangeTest.this.byteRange2 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum has only one value
org.apache.commons.lang3.RangeTest.this.intRange has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.RangeTest.this.intRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.longRange has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == java.lang.Long.class
org.apache.commons.lang3.RangeTest.this.longRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == java.lang.Float.class
org.apache.commons.lang3.RangeTest.this.floatRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest$2.(org.apache.commons.lang3.RangeTest):::ENTER
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.intRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.longRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.floatRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.intRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.longRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.floatRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange2.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange3.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.intRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.longRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.floatRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.doubleRange.toString
org.apache.commons.lang3.RangeTest.this has only one value
org.apache.commons.lang3.RangeTest.this.byteRange has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
org.apache.commons.lang3.RangeTest.this.byteRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
org.apache.commons.lang3.RangeTest.this.byteRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == 0
org.apache.commons.lang3.RangeTest.this.byteRange.toString == null
org.apache.commons.lang3.RangeTest.this.byteRange2 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum has only one value
org.apache.commons.lang3.RangeTest.this.intRange has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.RangeTest.this.intRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.longRange has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == java.lang.Long.class
org.apache.commons.lang3.RangeTest.this.longRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == java.lang.Float.class
org.apache.commons.lang3.RangeTest.this.floatRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest$2.(org.apache.commons.lang3.RangeTest):::EXIT
org.apache.commons.lang3.RangeTest.this == orig(org.apache.commons.lang3.RangeTest.this)
org.apache.commons.lang3.RangeTest.this.byteRange == orig(org.apache.commons.lang3.RangeTest.this.byteRange)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.intRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.longRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.floatRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.intRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.longRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.floatRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange2 == orig(org.apache.commons.lang3.RangeTest.this.byteRange2)
org.apache.commons.lang3.RangeTest.this.byteRange3 == orig(org.apache.commons.lang3.RangeTest.this.byteRange3)
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum)
org.apache.commons.lang3.RangeTest.this.intRange == orig(org.apache.commons.lang3.RangeTest.this.intRange)
org.apache.commons.lang3.RangeTest.this.intRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum)
org.apache.commons.lang3.RangeTest.this.intRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum)
org.apache.commons.lang3.RangeTest.this.longRange == orig(org.apache.commons.lang3.RangeTest.this.longRange)
org.apache.commons.lang3.RangeTest.this.longRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum)
org.apache.commons.lang3.RangeTest.this.longRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum)
org.apache.commons.lang3.RangeTest.this.floatRange == orig(org.apache.commons.lang3.RangeTest.this.floatRange)
org.apache.commons.lang3.RangeTest.this.floatRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum)
org.apache.commons.lang3.RangeTest.this.floatRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum)
org.apache.commons.lang3.RangeTest.this.doubleRange == orig(org.apache.commons.lang3.RangeTest.this.doubleRange)
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum)
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest$2.compare(java.lang.Integer, java.lang.Integer):::ENTER
o2 has only one value
===========================================================================
org.apache.commons.lang3.RangeTest$2.compare(java.lang.Integer, java.lang.Integer):::EXIT
org.apache.commons.lang3.RangeTest.this == orig(org.apache.commons.lang3.RangeTest.this)
org.apache.commons.lang3.RangeTest.this.byteRange == orig(org.apache.commons.lang3.RangeTest.this.byteRange)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.intRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.longRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.floatRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange2 == orig(org.apache.commons.lang3.RangeTest.this.byteRange2)
org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode == return
org.apache.commons.lang3.RangeTest.this.byteRange3 == orig(org.apache.commons.lang3.RangeTest.this.byteRange3)
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode == return
org.apache.commons.lang3.RangeTest.this.intRange == orig(org.apache.commons.lang3.RangeTest.this.intRange)
org.apache.commons.lang3.RangeTest.this.intRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum)
org.apache.commons.lang3.RangeTest.this.intRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum)
org.apache.commons.lang3.RangeTest.this.intRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.longRange == orig(org.apache.commons.lang3.RangeTest.this.longRange)
org.apache.commons.lang3.RangeTest.this.longRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum)
org.apache.commons.lang3.RangeTest.this.longRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum)
org.apache.commons.lang3.RangeTest.this.longRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.floatRange == orig(org.apache.commons.lang3.RangeTest.this.floatRange)
org.apache.commons.lang3.RangeTest.this.floatRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum)
org.apache.commons.lang3.RangeTest.this.floatRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum)
org.apache.commons.lang3.RangeTest.this.floatRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.doubleRange == orig(org.apache.commons.lang3.RangeTest.this.doubleRange)
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum)
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum)
org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode == return
return == orig(org.apache.commons.lang3.RangeTest.this.byteRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.intRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.longRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.floatRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode)
return == 0
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest$3:::OBJECT
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.intRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.longRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.floatRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.intRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.longRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.floatRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange2.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange3.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.intRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.longRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.floatRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.doubleRange.toString
this has only one value
org.apache.commons.lang3.RangeTest.this has only one value
org.apache.commons.lang3.RangeTest.this.byteRange has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
org.apache.commons.lang3.RangeTest.this.byteRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
org.apache.commons.lang3.RangeTest.this.byteRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == 0
org.apache.commons.lang3.RangeTest.this.byteRange.toString == null
org.apache.commons.lang3.RangeTest.this.byteRange2 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum has only one value
org.apache.commons.lang3.RangeTest.this.intRange has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.RangeTest.this.intRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.longRange has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == java.lang.Long.class
org.apache.commons.lang3.RangeTest.this.longRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == java.lang.Float.class
org.apache.commons.lang3.RangeTest.this.floatRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() != org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest$3.(org.apache.commons.lang3.RangeTest):::ENTER
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.intRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.longRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.floatRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.intRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.longRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.floatRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange2.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.byteRange3.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.intRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.longRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.floatRange.toString
org.apache.commons.lang3.RangeTest.this.byteRange.toString == org.apache.commons.lang3.RangeTest.this.doubleRange.toString
org.apache.commons.lang3.RangeTest.this has only one value
org.apache.commons.lang3.RangeTest.this.byteRange has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
org.apache.commons.lang3.RangeTest.this.byteRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
org.apache.commons.lang3.RangeTest.this.byteRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == 0
org.apache.commons.lang3.RangeTest.this.byteRange.toString == null
org.apache.commons.lang3.RangeTest.this.byteRange2 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3 has only one value
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum has only one value
org.apache.commons.lang3.RangeTest.this.intRange has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.RangeTest.this.intRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.longRange has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == java.lang.Long.class
org.apache.commons.lang3.RangeTest.this.longRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == java.lang.Float.class
org.apache.commons.lang3.RangeTest.this.floatRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum has only one value
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum has only one value
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName()
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest$3.(org.apache.commons.lang3.RangeTest):::EXIT
org.apache.commons.lang3.RangeTest.this == orig(org.apache.commons.lang3.RangeTest.this)
org.apache.commons.lang3.RangeTest.this.byteRange == orig(org.apache.commons.lang3.RangeTest.this.byteRange)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.intRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.longRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.floatRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.intRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.longRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.floatRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange2 == orig(org.apache.commons.lang3.RangeTest.this.byteRange2)
org.apache.commons.lang3.RangeTest.this.byteRange3 == orig(org.apache.commons.lang3.RangeTest.this.byteRange3)
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum)
org.apache.commons.lang3.RangeTest.this.intRange == orig(org.apache.commons.lang3.RangeTest.this.intRange)
org.apache.commons.lang3.RangeTest.this.intRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum)
org.apache.commons.lang3.RangeTest.this.intRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum)
org.apache.commons.lang3.RangeTest.this.longRange == orig(org.apache.commons.lang3.RangeTest.this.longRange)
org.apache.commons.lang3.RangeTest.this.longRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum)
org.apache.commons.lang3.RangeTest.this.longRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum)
org.apache.commons.lang3.RangeTest.this.floatRange == orig(org.apache.commons.lang3.RangeTest.this.floatRange)
org.apache.commons.lang3.RangeTest.this.floatRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum)
org.apache.commons.lang3.RangeTest.this.floatRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum)
org.apache.commons.lang3.RangeTest.this.doubleRange == orig(org.apache.commons.lang3.RangeTest.this.doubleRange)
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum)
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest$3.compare(java.lang.Integer, java.lang.Integer):::ENTER
===========================================================================
org.apache.commons.lang3.RangeTest$3.compare(java.lang.Integer, java.lang.Integer):::EXIT
org.apache.commons.lang3.RangeTest.this == orig(org.apache.commons.lang3.RangeTest.this)
org.apache.commons.lang3.RangeTest.this.byteRange == orig(org.apache.commons.lang3.RangeTest.this.byteRange)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.comparator == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.intRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.longRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.floatRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange.toString == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.toString)
org.apache.commons.lang3.RangeTest.this.byteRange2 == orig(org.apache.commons.lang3.RangeTest.this.byteRange2)
org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode == return
org.apache.commons.lang3.RangeTest.this.byteRange3 == orig(org.apache.commons.lang3.RangeTest.this.byteRange3)
org.apache.commons.lang3.RangeTest.this.byteRange3.maximum == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum)
org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode == return
org.apache.commons.lang3.RangeTest.this.intRange == orig(org.apache.commons.lang3.RangeTest.this.intRange)
org.apache.commons.lang3.RangeTest.this.intRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum)
org.apache.commons.lang3.RangeTest.this.intRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum)
org.apache.commons.lang3.RangeTest.this.intRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.longRange == orig(org.apache.commons.lang3.RangeTest.this.longRange)
org.apache.commons.lang3.RangeTest.this.longRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum)
org.apache.commons.lang3.RangeTest.this.longRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum)
org.apache.commons.lang3.RangeTest.this.longRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.floatRange == orig(org.apache.commons.lang3.RangeTest.this.floatRange)
org.apache.commons.lang3.RangeTest.this.floatRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum)
org.apache.commons.lang3.RangeTest.this.floatRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum)
org.apache.commons.lang3.RangeTest.this.floatRange.hashCode == return
org.apache.commons.lang3.RangeTest.this.doubleRange == orig(org.apache.commons.lang3.RangeTest.this.doubleRange)
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum)
org.apache.commons.lang3.RangeTest.this.doubleRange.maximum == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum)
org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode == return
return == orig(org.apache.commons.lang3.RangeTest.this.byteRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.intRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.longRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.floatRange.hashCode)
return == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.hashCode)
return == 0
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.comparator.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.comparator.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange2.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.byteRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.byteRange3.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.intRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.intRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.longRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.longRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.floatRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.floatRange.maximum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName())
org.apache.commons.lang3.RangeTest.this.doubleRange.minimum.getClass().getName() == orig(org.apache.commons.lang3.RangeTest.this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest:::OBJECT
this.byteRange.comparator == this.byteRange2.comparator
this.byteRange.comparator == this.byteRange3.comparator
this.byteRange.comparator == this.intRange.comparator
this.byteRange.comparator == this.longRange.comparator
this.byteRange.comparator == this.floatRange.comparator
this.byteRange.comparator == this.doubleRange.comparator
this.byteRange.minimum == this.byteRange2.minimum
this.byteRange.minimum == this.byteRange3.minimum
this.byteRange.maximum == this.byteRange2.maximum
this.byteRange.hashCode == this.byteRange2.hashCode
this.byteRange2.toString == this.byteRange3.toString
this.byteRange2.toString == this.longRange.toString
this.byteRange2.toString == this.floatRange.toString
this.byteRange2.toString == this.doubleRange.toString
this.longRange.hashCode == this.floatRange.hashCode
this.longRange.hashCode == this.doubleRange.hashCode
this.byteRange.comparator has only one value
this.byteRange.comparator != null
this.byteRange.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.byteRange.minimum has only one value
this.byteRange.minimum != null
this.byteRange.minimum.getClass().getName() == java.lang.Byte.class
this.byteRange.maximum has only one value
this.byteRange.maximum != null
this.byteRange.hashCode one of { 0, 127865079 }
this.byteRange.toString.toString == "[0..5]"
this.byteRange2.toString == null
this.byteRange3.maximum has only one value
this.byteRange3.maximum != null
this.byteRange3.hashCode one of { 0, 127865084 }
this.intRange.minimum has only one value
this.intRange.minimum != null
this.intRange.minimum.getClass().getName() == java.lang.Integer.class
this.intRange.maximum has only one value
this.intRange.maximum != null
this.intRange.hashCode one of { 0, 127865464 }
this.intRange.toString.toString == "[10..20]"
this.longRange.minimum has only one value
this.longRange.minimum != null
this.longRange.minimum.getClass().getName() == java.lang.Long.class
this.longRange.maximum has only one value
this.longRange.maximum != null
this.longRange.hashCode == 0
this.floatRange.minimum != null
this.floatRange.minimum.getClass().getName() == java.lang.Float.class
this.floatRange.maximum != null
this.doubleRange.minimum != null
this.doubleRange.minimum.getClass().getName() == java.lang.Double.class
this.doubleRange.maximum != null
org.apache.commons.lang3.Range.serialVersionUID != this.byteRange.hashCode
org.apache.commons.lang3.Range.serialVersionUID != this.byteRange3.hashCode
org.apache.commons.lang3.Range.serialVersionUID != this.intRange.hashCode
this.byteRange.comparator.getClass().getName() != this.byteRange.minimum.getClass().getName()
this.byteRange.comparator.getClass().getName() == this.byteRange2.comparator.getClass().getName()
this.byteRange.comparator.getClass().getName() == this.byteRange3.comparator.getClass().getName()
this.byteRange.comparator.getClass().getName() == this.intRange.comparator.getClass().getName()
this.byteRange.comparator.getClass().getName() != this.intRange.minimum.getClass().getName()
this.byteRange.comparator.getClass().getName() == this.longRange.comparator.getClass().getName()
this.byteRange.comparator.getClass().getName() != this.longRange.minimum.getClass().getName()
this.byteRange.comparator.getClass().getName() == this.floatRange.comparator.getClass().getName()
this.byteRange.comparator.getClass().getName() != this.floatRange.minimum.getClass().getName()
this.byteRange.comparator.getClass().getName() == this.doubleRange.comparator.getClass().getName()
this.byteRange.comparator.getClass().getName() != this.doubleRange.minimum.getClass().getName()
this.byteRange.minimum.getClass().getName() == this.byteRange.maximum.getClass().getName()
this.byteRange.minimum.getClass().getName() == this.byteRange2.minimum.getClass().getName()
this.byteRange.minimum.getClass().getName() == this.byteRange2.maximum.getClass().getName()
this.byteRange.minimum.getClass().getName() == this.byteRange3.minimum.getClass().getName()
this.byteRange.minimum.getClass().getName() == this.byteRange3.maximum.getClass().getName()
this.byteRange.minimum.getClass().getName() != this.intRange.minimum.getClass().getName()
this.byteRange.minimum.getClass().getName() != this.longRange.minimum.getClass().getName()
this.byteRange.minimum.getClass().getName() != this.floatRange.minimum.getClass().getName()
this.byteRange.minimum.getClass().getName() != this.doubleRange.minimum.getClass().getName()
this.byteRange.hashCode <= this.byteRange3.hashCode
this.byteRange.hashCode <= this.intRange.hashCode
this.byteRange.hashCode >= this.longRange.hashCode
this.byteRange3.hashCode <= this.intRange.hashCode
this.byteRange3.hashCode >= this.longRange.hashCode
this.intRange.minimum.getClass().getName() == this.intRange.maximum.getClass().getName()
this.intRange.minimum.getClass().getName() != this.longRange.minimum.getClass().getName()
this.intRange.minimum.getClass().getName() != this.floatRange.minimum.getClass().getName()
this.intRange.minimum.getClass().getName() != this.doubleRange.minimum.getClass().getName()
this.intRange.hashCode >= this.longRange.hashCode
this.longRange.minimum.getClass().getName() == this.longRange.maximum.getClass().getName()
this.longRange.minimum.getClass().getName() != this.floatRange.minimum.getClass().getName()
this.longRange.minimum.getClass().getName() != this.doubleRange.minimum.getClass().getName()
this.floatRange.minimum.getClass().getName() == this.floatRange.maximum.getClass().getName()
this.floatRange.minimum.getClass().getName() != this.doubleRange.minimum.getClass().getName()
this.doubleRange.minimum.getClass().getName() == this.doubleRange.maximum.getClass().getName()
===========================================================================
org.apache.commons.lang3.RangeTest.RangeTest():::EXIT
this.byteRange == this.byteRange2
this.byteRange == this.byteRange3
this.byteRange == this.intRange
this.byteRange == this.longRange
this.byteRange == this.floatRange
this.byteRange == this.doubleRange
this.byteRange == null
===========================================================================
org.apache.commons.lang3.RangeTest.setUp():::ENTER
this.byteRange == this.byteRange2
this.byteRange == this.byteRange3
this.byteRange == this.intRange
this.byteRange == this.longRange
this.byteRange == this.floatRange
this.byteRange == this.doubleRange
this.byteRange == null
===========================================================================
org.apache.commons.lang3.RangeTest.setUp():::EXIT
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange != null
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 != null
this.byteRange3 != null
this.intRange != null
this.longRange != null
this.floatRange != null
this.doubleRange != null
===========================================================================
org.apache.commons.lang3.RangeTest.testBetweenWithCompare():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testBetweenWithCompare():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testComparableConstructors():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testComparableConstructors():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testContains():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testContains():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testContainsRange():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testContainsRange():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testElementCompareTo():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testElementCompareTo():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testEqualsObject():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testEqualsObject():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testHashCode():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testHashCode():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.longRange.hashCode == orig(this.byteRange.hashCode)
this.longRange.hashCode == orig(this.byteRange2.hashCode)
this.longRange.hashCode == orig(this.byteRange3.hashCode)
this.longRange.hashCode == orig(this.intRange.hashCode)
this.longRange.hashCode == orig(this.longRange.hashCode)
this.longRange.hashCode == orig(this.floatRange.hashCode)
this.longRange.hashCode == orig(this.doubleRange.hashCode)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 127865079
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.byteRange3.hashCode == 127865084
this.intRange has only one value
this.intRange.hashCode == 127865464
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIntersectionWith():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIntersectionWith():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsAfter():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsAfter():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsAfterRange():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsAfterRange():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsBefore():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsBefore():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsBeforeRange():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsBeforeRange():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsEndedBy():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsEndedBy():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsOverlappedBy():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsOverlappedBy():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsStartedBy():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsStartedBy():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testIsWithCompare():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testIsWithCompare():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testRangeOfChars():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testRangeOfChars():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testSerializing():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testSerializing():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testToString():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testToString():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange2 == orig(this.byteRange2)
this.byteRange2.toString == orig(this.byteRange.toString)
this.byteRange2.toString == orig(this.byteRange2.toString)
this.byteRange2.toString == orig(this.byteRange3.toString)
this.byteRange2.toString == orig(this.intRange.toString)
this.byteRange2.toString == orig(this.longRange.toString)
this.byteRange2.toString == orig(this.floatRange.toString)
this.byteRange2.toString == orig(this.doubleRange.toString)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString has only one value
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.intRange.toString has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.RangeTest.testToStringFormat():::ENTER
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this has only one value
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
===========================================================================
org.apache.commons.lang3.RangeTest.testToStringFormat():::EXIT
this.byteRange == orig(this.byteRange)
this.byteRange.comparator == orig(this.byteRange.comparator)
this.byteRange.comparator == orig(this.byteRange2.comparator)
this.byteRange.comparator == orig(this.byteRange3.comparator)
this.byteRange.comparator == orig(this.intRange.comparator)
this.byteRange.comparator == orig(this.longRange.comparator)
this.byteRange.comparator == orig(this.floatRange.comparator)
this.byteRange.comparator == orig(this.doubleRange.comparator)
this.byteRange.minimum == orig(this.byteRange.minimum)
this.byteRange.minimum == orig(this.byteRange2.minimum)
this.byteRange.minimum == orig(this.byteRange3.minimum)
this.byteRange.maximum == orig(this.byteRange.maximum)
this.byteRange.maximum == orig(this.byteRange2.maximum)
this.byteRange.hashCode == this.byteRange3.hashCode
this.byteRange.hashCode == this.intRange.hashCode
this.byteRange.hashCode == this.longRange.hashCode
this.byteRange.hashCode == this.floatRange.hashCode
this.byteRange.hashCode == this.doubleRange.hashCode
this.byteRange.hashCode == orig(this.byteRange.hashCode)
this.byteRange.hashCode == orig(this.byteRange2.hashCode)
this.byteRange.hashCode == orig(this.byteRange3.hashCode)
this.byteRange.hashCode == orig(this.intRange.hashCode)
this.byteRange.hashCode == orig(this.longRange.hashCode)
this.byteRange.hashCode == orig(this.floatRange.hashCode)
this.byteRange.hashCode == orig(this.doubleRange.hashCode)
this.byteRange.toString == this.byteRange2.toString
this.byteRange.toString == this.byteRange3.toString
this.byteRange.toString == this.intRange.toString
this.byteRange.toString == this.longRange.toString
this.byteRange.toString == this.floatRange.toString
this.byteRange.toString == this.doubleRange.toString
this.byteRange.toString == orig(this.byteRange.toString)
this.byteRange.toString == orig(this.byteRange2.toString)
this.byteRange.toString == orig(this.byteRange3.toString)
this.byteRange.toString == orig(this.intRange.toString)
this.byteRange.toString == orig(this.longRange.toString)
this.byteRange.toString == orig(this.floatRange.toString)
this.byteRange.toString == orig(this.doubleRange.toString)
this.byteRange2 == orig(this.byteRange2)
this.byteRange3 == orig(this.byteRange3)
this.byteRange3.maximum == orig(this.byteRange3.maximum)
this.intRange == orig(this.intRange)
this.intRange.minimum == orig(this.intRange.minimum)
this.intRange.maximum == orig(this.intRange.maximum)
this.longRange == orig(this.longRange)
this.longRange.minimum == orig(this.longRange.minimum)
this.longRange.maximum == orig(this.longRange.maximum)
this.floatRange == orig(this.floatRange)
this.floatRange.minimum == orig(this.floatRange.minimum)
this.floatRange.maximum == orig(this.floatRange.maximum)
this.doubleRange == orig(this.doubleRange)
this.doubleRange.minimum == orig(this.doubleRange.minimum)
this.doubleRange.maximum == orig(this.doubleRange.maximum)
this.byteRange has only one value
this.byteRange.hashCode == 0
this.byteRange.toString == null
this.byteRange2 has only one value
this.byteRange3 has only one value
this.intRange has only one value
this.longRange has only one value
this.floatRange has only one value
this.floatRange.minimum has only one value
this.floatRange.maximum has only one value
this.doubleRange has only one value
this.doubleRange.minimum has only one value
this.doubleRange.maximum has only one value
this.byteRange.comparator.getClass().getName() == orig(this.byteRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange2.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.byteRange3.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.intRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.longRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.floatRange.comparator.getClass().getName())
this.byteRange.comparator.getClass().getName() == orig(this.doubleRange.comparator.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange2.maximum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.minimum.getClass().getName())
this.byteRange.minimum.getClass().getName() == orig(this.byteRange3.maximum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.minimum.getClass().getName())
this.intRange.minimum.getClass().getName() == orig(this.intRange.maximum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.minimum.getClass().getName())
this.longRange.minimum.getClass().getName() == orig(this.longRange.maximum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.minimum.getClass().getName())
this.floatRange.minimum.getClass().getName() == orig(this.floatRange.maximum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.minimum.getClass().getName())
this.doubleRange.minimum.getClass().getName() == orig(this.doubleRange.maximum.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:::CLASS
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes has only one value
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:::OBJECT
this has only one value
this.classLoader has only one value
this.classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName() != this.classLoader.getClass().getName()
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader):::ENTER
in has only one value
in.getClass().getName() == java.io.ByteArrayInputStream.class
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader):::EXIT
this.classLoader == orig(classLoader)
this.classLoader.getClass().getName() == orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::ENTER
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::EXIT308
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::EXIT
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes == orig(org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes)
this.classLoader == orig(this.classLoader)
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName() == orig(org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName())
this.classLoader.getClass().getName() == orig(this.classLoader.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.Range.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::EXIT97
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.lang3.Range.class
return.getClass().getName() == orig(object.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::ENTER
obj has only one value
obj.getClass().getName() == org.apache.commons.lang3.Range.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::EXIT
return has only one value
return[] == [-84, -19, 0, 5, 115, 114, 0, 30, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 82, 97, 110, 103, 101, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 76, 0, 10, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 116, 0, 22, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 67, 111, 109, 112, 97, 114, 97, 116, 111, 114, 59, 76, 0, 7, 109, 97, 120, 105, 109, 117, 109, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 0, 7, 109, 105, 110, 105, 109, 117, 109, 113, 0, 126, 0, 2, 120, 112, 126, 114, 0, 51, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 82, 97, 110, 103, 101, 36, 67, 111, 109, 112, 97, 114, 97, 98, 108, 101, 67, 111, 109, 112, 97, 114, 97, 116, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 8, 73, 78, 83, 84, 65, 78, 67, 69, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 20, 115, 113, 0, 126, 0, 8, 0, 0, 0, 10]
size(return[]) == 330
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::ENTER
obj has only one value
obj.getClass().getName() == org.apache.commons.lang3.Range.class
outputStream has only one value
outputStream.getClass().getName() == java.io.ByteArrayOutputStream.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::EXIT
===========================================================================
org.apache.commons.lang3.daikon.RangeTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.RangeTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT120
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
message == null
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::EXIT
===========================================================================
org.junit.Assert.assertEquals(long, long):::ENTER
expected == actual
===========================================================================
org.junit.Assert.assertEquals(long, long):::EXIT
===========================================================================
org.junit.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
org.junit.Assert.assertFalse(boolean):::EXIT
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::ENTER
condition == false
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == java.lang.String.class
===========================================================================
org.junit.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object has only one value
object.getClass().getName() == java.lang.String.class
===========================================================================
org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == org.apache.commons.lang3.Range.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == org.apache.commons.lang3.Range.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT577
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
org.junit.Assert.assertTrue(boolean):::EXIT
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.fCanUseSuiteMethod == true
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::ENTER
canUseSuiteMethod == true
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::EXIT
this.fCanUseSuiteMethod == orig(canUseSuiteMethod)
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == return.fSuiteBuilder.parents
this.parents == orig(this.parents)
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.fSuiteBuilder has only one value
return.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
this.parents.getClass().getName() == return.fSuiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT31
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT54
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this has only one value
this.fSuiteBuilder has only one value
this.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.fSuiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
this.fSuiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.fSuiteBuilder == orig(suiteBuilder)
this.fSuiteBuilder.parents == suiteBuilder.parents
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
this.fSuiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT25
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
this.fSuiteBuilder == orig(this.fSuiteBuilder)
this.fSuiteBuilder.parents == orig(this.fSuiteBuilder.parents)
this.parents == orig(this.parents)
return == null
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.fSuiteBuilder.getClass().getName() == orig(this.fSuiteBuilder.getClass().getName())
this.parents.getClass().getName() == orig(this.fSuiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == false
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == false
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fNotifier.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[] elements != null
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.fNotifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fChildren[] elements != null
this.fDescription.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDescription.fAnnotations[] elements != null
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fDescription.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fNotifier.fListeners[]) == 1
size(this.fDescription.fChildren[]) one of { 0, 1, 24 }
size(this.fDescription.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDescription.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDescription.fDisplayName.toString
size(this.fNotifier.fListeners[]) != size(this.fDescription.fChildren[])-1
size(this.fNotifier.fListeners[]) >= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[]) != size(this.fDescription.fAnnotations[])
size(this.fDescription.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[])-1 != size(this.fDescription.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(notifier.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 1
size(description.fChildren[]) one of { 0, 1, 24 }
size(description.fAnnotations[]) one of { 0, 1 }
notifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[]) >= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.fNotifier == orig(notifier)
this.fNotifier.fListeners == notifier.fListeners
this.fNotifier.fListeners[] == notifier.fListeners[]
this.fNotifier.fPleaseStop == notifier.fPleaseStop
this.fDescription == orig(description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fChildren[] == description.fChildren[]
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fAnnotations == description.fAnnotations
this.fDescription.fAnnotations[] == description.fAnnotations[]
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(notifier.fListeners[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(notifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 1
size(description.fChildren[]) one of { 0, 1, 24 }
size(description.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() == notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[]) >= size(description.fAnnotations[])
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable):::EXIT30
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable:::OBJECT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable():::EXIT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::ENTER
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::EXIT
return.getClass().getName() == org.apache.commons.lang3.RangeTest.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.ExpectException:::OBJECT
this.fNext.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fExpected has only one value
===========================================================================
org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class):::ENTER
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
expected has only one value
===========================================================================
org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class):::EXIT
this.fNext == orig(next)
this.fExpected == orig(expected)
this.fNext.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.ExpectException.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.ExpectException.evaluate():::EXIT
this.fNext == orig(this.fNext)
this.fExpected == orig(this.fExpected)
this.fNext.getClass().getName() == orig(this.fNext.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod:::OBJECT
this.fTarget.getClass().getName() == org.apache.commons.lang3.RangeTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestMethod == orig(testMethod)
this.fTestMethod.fMethod == testMethod.fMethod
this.fTarget == orig(target)
testMethod.fMethod == orig(testMethod.fMethod)
this.fTarget.getClass().getName() == orig(target.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::EXIT
this.fTestMethod == orig(this.fTestMethod)
this.fTestMethod.fMethod == orig(this.fTestMethod.fMethod)
this.fTarget == orig(this.fTarget)
this.fTarget.getClass().getName() == orig(this.fTarget.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.RunBefores:::OBJECT
this.fTarget.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fBefores has only one value
this.fBefores[] contains no nulls and has only one value, of length 1
this.fBefores[] elements has only one value
this.fBefores[] elements != null
this.fBefores[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
this.fBefores[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
this.fBefores.getClass().getName() == java.util.ArrayList.class
size(this.fBefores[]) == 1
this.fNext.getClass().getName() != this.fTarget.getClass().getName()
this.fNext.getClass().getName() != this.fBefores.getClass().getName()
this.fTarget.getClass().getName() != this.fBefores.getClass().getName()
===========================================================================
org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object):::ENTER
befores has only one value
befores[] contains no nulls and has only one value, of length 1
befores[] elements has only one value
befores[] elements != null
befores[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
befores[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
befores.getClass().getName() == java.util.ArrayList.class
target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
size(befores[]) == 1
next.getClass().getName() != befores.getClass().getName()
next.getClass().getName() != target.getClass().getName()
befores.getClass().getName() != target.getClass().getName()
===========================================================================
org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object):::EXIT
this.fNext == orig(next)
this.fTarget == orig(target)
this.fBefores == orig(befores)
this.fBefores[] == befores[]
befores[] == orig(befores[])
befores[] contains no nulls and has only one value, of length 1
befores[] elements has only one value
befores[] elements != null
befores[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
befores[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
this.fNext.getClass().getName() == orig(next.getClass().getName())
this.fTarget.getClass().getName() == orig(target.getClass().getName())
this.fBefores.getClass().getName() == orig(befores.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.RunBefores.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.RunBefores.evaluate():::EXIT
this.fNext == orig(this.fNext)
this.fTarget == orig(this.fTarget)
this.fBefores == orig(this.fBefores)
this.fBefores[] == orig(this.fBefores[])
this.fNext.getClass().getName() == orig(this.fNext.getClass().getName())
this.fTarget.getClass().getName() == orig(this.fTarget.getClass().getName())
this.fBefores.getClass().getName() == orig(this.fBefores.getClass().getName())
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.parents == orig($hidden$2.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
this.fChildren != null
this.fChildren[] elements != null
this.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDisplayName != null
this.fAnnotations != null
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] elements != null
this.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fAnnotations[])-1
size(this.fChildren[]) >= size(this.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
displayName != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fChildren[] == this.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == this.fChildren[].getClass().getName()
this.fDisplayName == orig(displayName)
this.fAnnotations == orig(annotations)
this.fAnnotations[] == annotations[]
annotations[] == orig(annotations[])
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
annotations[] elements != null
org.junit.runner.Description.EMPTY.fChildren[] is the reverse of this.fChildren[]
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
this.fDisplayName.toString == displayName.toString
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
displayName.toString == orig(displayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(annotations[])-1
size(this.fChildren[]) <= size(this.fAnnotations[])
size(this.fChildren[]) >= size(annotations[])-1
size(this.fChildren[])-1 <= size(annotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
description != null
description.fChildren != null
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(description.fChildren[]) one of { 0, 24 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) % size(description.fChildren[])-1 == 0
size(this.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
size(this.fChildren[])-1 == orig(size(this.fChildren[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
description.fChildren != null
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fChildren[]) >= 1
size(description.fChildren[]) one of { 0, 24 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
orig(description) in this.fChildren[]
this.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString == orig(this.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= orig(size(this.fChildren[]))-1
size(description.fChildren[]) % size(this.fChildren[]) == 0
size(this.fChildren[]) != size(description.fChildren[])
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) >= size(description.fAnnotations[])
size(description.fAnnotations[])-1 % size(this.fChildren[]) == 0
size(this.fChildren[])-1 != size(description.fChildren[])-1
size(this.fChildren[])-1 % size(description.fChildren[])-1 == 0
size(this.fChildren[])-1 >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])
name.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))
name.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
clazz has only one value
clazz != null
name != null
annotations != null
annotations[] elements != null
size(annotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
annotations[] == return.fAnnotations[]
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))-1
annotations[] elements != null
return != null
return.fChildren != null
return.fDisplayName != null
return.fAnnotations != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString < return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.getChildren():::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
===========================================================================
org.junit.runner.Description.getChildren():::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == return
this.fChildren[] == return[]
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
return == orig(this.fChildren)
return[] == orig(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
return != null
return[] elements != null
return[].getClass().getName() elements == org.junit.runner.Description.class
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(return[])
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(return[])-1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fNotifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.fNotifier.fPleaseStop == false
size(this.fNotifier.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fNotifier.fListeners[]) == 1
listener in this.fNotifier.fListeners[]
this.fNotifier.fListeners[] elements == listener
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::ENTER
size(this.fNotifier.fListeners[]) == size(classes[])-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
classes[] == orig(classes[])
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(classes[])-1
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fIgnoreCount == orig(size(classes[]))-1
size(return.fFailures[])-1 == orig(size(classes[]))
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount == 24
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2219
return.fStartTime == 1501560175774L
size(return.fFailures[]) == 2
return.fFailures[return.fIgnoreCount] has only one value
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
classes[] elements == classes[return.fIgnoreCount]
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
return has only one value
return.fCount == 24
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2219
return.fStartTime == 1501560175774L
size(return.fFailures[]) == 2
return.fFailures[return.fIgnoreCount] has only one value
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
return has only one value
return.fCount == 24
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2219
return.fStartTime == 1501560175774L
size(return.fFailures[]) == 2
return.fFailures[return.fIgnoreCount] has only one value
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::ENTER
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::EXIT
classes[] == orig(classes[])
return.fIgnoreCount == size(classes[])-1
return.fIgnoreCount == orig(size(classes[]))-1
size(return.fFailures[])-1 == orig(size(classes[]))
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount == 24
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2219
return.fStartTime == 1501560175774L
size(return.fFailures[]) == 2
return.fFailures[return.fIgnoreCount] has only one value
classes[] elements == classes[return.fIgnoreCount]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
return == orig(this.val$runner)
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
this.val$runner.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.val$runner.getClass().getName())
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount >= 0
org.junit.runner.Result.this.fIgnoreCount == 0
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] elements != null
org.junit.runner.Result.this.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.ArrayList.class
org.junit.runner.Result.this.fRunTime one of { 0, 2219 }
org.junit.runner.Result.this.fStartTime one of { 0, 1501560175774L }
size(org.junit.runner.Result.this.fFailures[]) one of { 0, 1, 2 }
org.junit.runner.Result.this.fCount >= org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount >= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fIgnoreCount <= org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fIgnoreCount <= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fRunTime <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fStartTime >= size(org.junit.runner.Result.this.fFailures[])
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fCount == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == size(failure.fDescription.fChildren[])
size(failure.fDescription.fChildren[]) == size(failure.fDescription.fAnnotations[])-1
org.junit.runner.Result.this.fCount one of { 11, 16 }
org.junit.runner.Result.this.fFailures[] elements has only one value
org.junit.runner.Result.this.fFailures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.fStartTime == 1501560175774L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.Result.this.fFailures[]) one of { 0, 1 }
size(failure.fDescription.fAnnotations[]) == 1
failure.fDescription.fAnnotations[] elements == failure.fDescription.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fIgnoreCount == size(failure.fDescription.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren[] == orig(failure.fDescription.fChildren[])
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fThrownException == orig(failure.fThrownException)
size(org.junit.runner.Result.this.fFailures[])-1 == orig(size(org.junit.runner.Result.this.fFailures[]))
size(failure.fDescription.fChildren[]) == size(failure.fDescription.fAnnotations[])-1
size(failure.fDescription.fChildren[]) == orig(size(failure.fDescription.fAnnotations[]))-1
org.junit.runner.Result.this.fCount one of { 11, 16 }
org.junit.runner.Result.this.fFailures[].getClass().getName() one of { [org.junit.runner.notification.Failure], [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.fStartTime == 1501560175774L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.Result.this.fFailures[]) one of { 1, 2 }
size(failure.fDescription.fAnnotations[]) == 1
org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fIgnoreCount] has only one value
orig(failure) in org.junit.runner.Result.this.fFailures[]
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] elements == failure.fDescription.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
orig(org.junit.runner.Result.this.fFailures[]) elements == org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fIgnoreCount]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
org.junit.runner.Result.this.fStartTime == 1501560175774L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fCount < org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount >= size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Result.this.fStartTime > size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
size(org.junit.runner.Result.this.fFailures[]) >= size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Result.this.fFailures[])-1 >= size(org.junit.runner.Description.EMPTY.fChildren[])-1
size(org.junit.runner.Result.this.fFailures[])-1 <= size(description.fAnnotations[])
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Result.this.fStartTime == 1501560175774L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fCount > org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fIgnoreCount % org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fCount < org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount - orig(org.junit.runner.Result.this.fCount) - 1 == 0
org.junit.runner.Result.this.fCount > size(org.junit.runner.Result.this.fFailures[])
size(org.junit.runner.Description.EMPTY.fChildren[]) % org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fCount >= size(description.fAnnotations[])
org.junit.runner.Result.this.fIgnoreCount <= orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fStartTime > orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fStartTime > size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
orig(org.junit.runner.Result.this.fCount) >= size(org.junit.runner.Result.this.fFailures[])
orig(org.junit.runner.Result.this.fCount) >= size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Result.this.fFailures[]) >= size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Result.this.fFailures[])-1 >= size(org.junit.runner.Description.EMPTY.fChildren[])-1
size(org.junit.runner.Result.this.fFailures[])-1 <= size(description.fAnnotations[])
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fIgnoreCount == result.fRunTime
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fStartTime == result.fStartTime
org.junit.runner.Result.this.fCount == 24
org.junit.runner.Result.this.fFailures[] contains no nulls and has only one value, of length 2
org.junit.runner.Result.this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
org.junit.runner.Result.this.fStartTime == 1501560175774L
size(org.junit.runner.Result.this.fFailures[]) == 2
org.junit.runner.Result.this.fFailures[result.fIgnoreCount] has only one value
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fRunTime == result.fRunTime
org.junit.runner.Result.this.fStartTime == result.fStartTime
result.fCount == orig(org.junit.runner.Result.this.fCount)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fIgnoreCount == orig(result.fRunTime)
result.fFailures == orig(org.junit.runner.Result.this.fFailures)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
result.fStartTime == orig(result.fStartTime)
result.fCount == 24
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fRunTime == 2219
result.fStartTime == 1501560175774L
size(result.fFailures[]) == 2
result.fFailures[result.fIgnoreCount] has only one value
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures[] == []
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fCount]
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fStartTime == 1501560175774L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fCount]
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.Result:::OBJECT
this.fCount == this.fIgnoreCount
this.fCount == this.fRunTime
this.fCount == this.fStartTime
this.fCount == size(this.fFailures[])
this has only one value
this.fFailures has only one value
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runner.Result.Result():::EXIT
===========================================================================
org.junit.runner.Result.createListener():::ENTER
===========================================================================
org.junit.runner.Result.createListener():::EXIT
this.fCount == orig(this.fCount)
this.fCount == orig(this.fIgnoreCount)
this.fCount == orig(this.fRunTime)
this.fCount == orig(this.fStartTime)
this.fCount == orig(size(this.fFailures[]))
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
return has only one value
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.runner.manipulation.Sorter$1.():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.manipulation.Sorter:::CLASS
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator != null
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter:::OBJECT
this == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fComparator
this has only one value
this.fComparator has only one value
this.fComparator != null
this.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fComparator.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::ENTER
comparator has only one value
comparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::ENTER
object != null
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != object.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(object.getClass().getName())
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
o1 != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
o1.fChildren != null
o1.fDisplayName != null
o1.fAnnotations != null
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2 != null
o2.fChildren != null
o2.fDisplayName != null
o2.fAnnotations != null
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
return == size(org.junit.runner.Description.EMPTY.fAnnotations[])
return == size(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
return == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
return == size(o1.fChildren[])
return == size(o1.fAnnotations[])-1
return == size(o2.fChildren[])
return == size(o2.fAnnotations[])-1
return == orig(size(org.junit.runner.Description.EMPTY.fChildren[]))
return == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
return == orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[]))
return == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
return == orig(size(o1.fChildren[]))
return == orig(size(o1.fAnnotations[]))-1
return == orig(size(o2.fChildren[]))
return == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
o1.fChildren != null
o1.fDisplayName != null
o1.fAnnotations != null
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fChildren != null
o2.fDisplayName != null
o2.fAnnotations != null
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.notification.Failure:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fDescription.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::EXIT
this.fDescription == orig(description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fAnnotations == description.fAnnotations
this.fDescription.fAnnotations[] == description.fAnnotations[]
this.fThrownException == orig(thrownException)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
description.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
this has only one value
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
this has only one value
this.val$description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fChildren[] contains no nulls and has only one value, of length 1
this.val$description.fChildren[] elements has only one value
this.val$description.fChildren[].getClass().getName() == [org.junit.runner.Description]
this.val$description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "null"
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fChildren[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fChildren[] == $hidden$2.fChildren[]
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fChildren[])
size($hidden$2.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size($hidden$2.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
this.val$result.fIgnoreCount == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$result.fFailures[])-1 == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
this has only one value
this.val$result has only one value
this.val$result.fCount == 24
this.val$result.fIgnoreCount == 0
this.val$result.fFailures has only one value
this.val$result.fFailures[] contains no nulls and has only one value, of length 2
this.val$result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.val$result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.val$result.fFailures.getClass().getName() == java.util.ArrayList.class
this.val$result.fRunTime one of { 0, 2219 }
this.val$result.fStartTime == 1501560175774L
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$result.fFailures[]) == 2
this.val$result.fFailures[this.val$result.fIgnoreCount] has only one value
this.val$result.fFailures.getClass().getName() == org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
$hidden$2.fIgnoreCount == $hidden$2.fRunTime
$hidden$2.fIgnoreCount == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fFailures[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
$hidden$2.fCount == 24
$hidden$2.fIgnoreCount == 0
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] contains no nulls and has only one value, of length 2
$hidden$2.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
$hidden$2.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.fStartTime == 1501560175774L
size($hidden$2.fFailures[]) == 2
$hidden$2.fFailures[$hidden$2.fIgnoreCount] has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fIgnoreCount]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
this.val$result.fCount == $hidden$2.fCount
this.val$result.fIgnoreCount == $hidden$2.fIgnoreCount
this.val$result.fFailures == $hidden$2.fFailures
this.val$result.fFailures[] == $hidden$2.fFailures[]
this.val$result.fRunTime == $hidden$2.fIgnoreCount
this.val$result.fStartTime == $hidden$2.fStartTime
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fCount == orig($hidden$2.fCount)
$hidden$2.fIgnoreCount == $hidden$2.fRunTime
$hidden$2.fIgnoreCount == orig($hidden$2.fIgnoreCount)
$hidden$2.fIgnoreCount == orig($hidden$2.fRunTime)
$hidden$2.fIgnoreCount == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
$hidden$2.fFailures == orig($hidden$2.fFailures)
$hidden$2.fFailures[] == orig($hidden$2.fFailures[])
$hidden$2.fStartTime == orig($hidden$2.fStartTime)
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fFailures[])-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == orig(size($hidden$2.fFailures[]))-1
$hidden$2.fCount == 24
$hidden$2.fIgnoreCount == 0
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] contains no nulls and has only one value, of length 2
$hidden$2.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
$hidden$2.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.fFailures.getClass().getName() == java.util.ArrayList.class
$hidden$2.fStartTime == 1501560175774L
size($hidden$2.fFailures[]) == 2
$hidden$2.fFailures[$hidden$2.fIgnoreCount] has only one value
this.val$result.fFailures.getClass().getName() == $hidden$2.fFailures.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fIgnoreCount]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
$hidden$2.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fFailures.getClass().getName() == orig($hidden$2.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
this.val$result.fIgnoreCount == this.val$result.fRunTime
each == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
this.val$result.fCount == orig(this.val$result.fCount)
this.val$result.fIgnoreCount == orig(this.val$result.fIgnoreCount)
this.val$result.fIgnoreCount == orig(this.val$result.fRunTime)
this.val$result.fFailures == orig(this.val$result.fFailures)
this.val$result.fFailures[] == orig(this.val$result.fFailures[])
this.val$result.fStartTime == orig(this.val$result.fStartTime)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
orig(each) == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == orig(size(this.val$result.fFailures[]))-1
this.val$result.fRunTime == 2219
this.val$result.fFailures.getClass().getName() == orig(this.val$result.fFailures.getClass().getName())
this.val$result.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size($hidden$2.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$4:::OBJECT
size(this.val$failure.fDescription.fChildren[]) == size(this.val$failure.fDescription.fAnnotations[])-1
size(this.val$failure.fDescription.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$failure.fDescription.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
this.val$failure.fDescription.fChildren[] == []
this.val$failure.fDescription.fChildren[].getClass().getName() == []
this.val$failure.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
this.val$failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.val$failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure):::ENTER
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fDescription.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fDescription.fChildren[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
$hidden$2.fDescription.fChildren[] == []
$hidden$2.fDescription.fChildren[].getClass().getName() == []
$hidden$2.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
$hidden$2.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure):::EXIT
this.val$failure == orig($hidden$2)
this.val$failure.fDescription == $hidden$2.fDescription
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
this.val$failure.fDescription.fChildren == $hidden$2.fDescription.fChildren
this.val$failure.fDescription.fChildren[] == $hidden$2.fDescription.fChildren[]
this.val$failure.fDescription.fDisplayName == $hidden$2.fDescription.fDisplayName
this.val$failure.fDescription.fAnnotations == $hidden$2.fDescription.fAnnotations
this.val$failure.fDescription.fAnnotations[] == $hidden$2.fDescription.fAnnotations[]
this.val$failure.fThrownException == $hidden$2.fThrownException
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fDescription == orig($hidden$2.fDescription)
$hidden$2.fDescription.fChildren == orig($hidden$2.fDescription.fChildren)
$hidden$2.fDescription.fChildren[] == orig($hidden$2.fDescription.fChildren[])
$hidden$2.fDescription.fDisplayName == orig($hidden$2.fDescription.fDisplayName)
$hidden$2.fDescription.fAnnotations == orig($hidden$2.fDescription.fAnnotations)
$hidden$2.fDescription.fAnnotations[] == orig($hidden$2.fDescription.fAnnotations[])
$hidden$2.fThrownException == orig($hidden$2.fThrownException)
size(this.val$failure.fDescription.fAnnotations[])-1 == size($hidden$2.fDescription.fChildren[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fDescription.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == orig(size($hidden$2.fDescription.fAnnotations[]))
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fDescription.fChildren[])
size($hidden$2.fDescription.fChildren[]) == size($hidden$2.fDescription.fAnnotations[])-1
size($hidden$2.fDescription.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size($hidden$2.fDescription.fChildren[]) == orig(size($hidden$2.fDescription.fAnnotations[]))-1
$hidden$2.fDescription.fChildren[] == []
$hidden$2.fDescription.fChildren[].getClass().getName() == []
$hidden$2.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
$hidden$2.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.val$failure.fDescription.fDisplayName.toString == $hidden$2.fDescription.fDisplayName.toString
this.val$failure.fDescription.fAnnotations.getClass().getName() == $hidden$2.fDescription.fAnnotations.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDescription.fDisplayName.toString == orig($hidden$2.fDescription.fDisplayName.toString)
$hidden$2.fDescription.fAnnotations.getClass().getName() == orig($hidden$2.fDescription.fAnnotations.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$failure == orig(this.val$failure)
this.val$failure.fDescription == orig(this.val$failure.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
this.val$failure.fDescription.fChildren == orig(this.val$failure.fDescription.fChildren)
this.val$failure.fDescription.fChildren[] == orig(this.val$failure.fDescription.fChildren[])
this.val$failure.fDescription.fDisplayName == orig(this.val$failure.fDescription.fDisplayName)
this.val$failure.fDescription.fAnnotations == orig(this.val$failure.fDescription.fAnnotations)
this.val$failure.fDescription.fAnnotations[] == orig(this.val$failure.fDescription.fAnnotations[])
this.val$failure.fThrownException == orig(this.val$failure.fThrownException)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(this.val$failure.fDescription.fChildren[]) == orig(size(this.val$failure.fDescription.fAnnotations[]))-1
size(this.val$failure.fDescription.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == orig(size(this.val$failure.fDescription.fAnnotations[]))
this.val$failure.fDescription.fDisplayName.toString == orig(this.val$failure.fDescription.fDisplayName.toString)
this.val$failure.fDescription.fAnnotations.getClass().getName() == orig(this.val$failure.fDescription.fAnnotations.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$7:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size($hidden$2.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
this.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fListeners.getClass().getName() == java.util.ArrayList.class
this.fPleaseStop == false
size(this.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[])-1 == orig(size(this.fListeners[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::ENTER
size(this.fListeners[]) == size(failure.fDescription.fAnnotations[])
size(this.fListeners[])-1 == size(failure.fDescription.fChildren[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren[] == orig(failure.fDescription.fChildren[])
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fThrownException == orig(failure.fThrownException)
size(this.fListeners[]) == size(failure.fDescription.fAnnotations[])
size(this.fListeners[]) == orig(size(failure.fDescription.fAnnotations[]))
size(this.fListeners[])-1 == size(failure.fDescription.fChildren[])
size(this.fListeners[])-1 == orig(size(failure.fDescription.fChildren[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testGetMaximum(org.apache.commons.lang3.RangeTest)", "testGetMinimum(org.apache.commons.lang3.RangeTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[]) == orig(size(description.fAnnotations[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
result.fIgnoreCount == size(this.fListeners[])-1
result.fRunTime == size(this.fListeners[])-1
size(this.fListeners[]) == size(result.fFailures[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result has only one value
result.fCount == 24
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fStartTime == 1501560175774L
size(result.fFailures[]) == 2
result.fFailures[result.fIgnoreCount] has only one value
this.fListeners[] elements == this.fListeners[result.fIgnoreCount]
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fIgnoreCount == orig(result.fRunTime)
result.fIgnoreCount == size(this.fListeners[])-1
result.fIgnoreCount == orig(size(this.fListeners[]))-1
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(result.fStartTime)
size(this.fListeners[]) == size(result.fFailures[])-1
size(this.fListeners[]) == orig(size(result.fFailures[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result.fCount == 24
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fRunTime == 2219
result.fStartTime == 1501560175774L
size(result.fFailures[]) == 2
result.fFailures[result.fIgnoreCount] has only one value
this.fListeners[] elements == this.fListeners[result.fIgnoreCount]
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(this.fListeners[]) == size(description.fChildren[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(this.fListeners[]) == size(description.fChildren[])
size(this.fListeners[]) == orig(size(description.fChildren[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[]) == orig(size(description.fAnnotations[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fListeners[]) == 1
listener in this.fListeners[]
this.fListeners[] elements == listener
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[]) == orig(size(this.fListeners[]))-1
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1:::OBJECT
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::ENTER
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
return.getClass().getName() == org.apache.commons.lang3.RangeTest.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this has only one value
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations has only one value
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler has only one value
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(klass)
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] contains no nulls and has only one value, of length 24
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 24
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="return == true"
return == true
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] contains no nulls and has only one value, of length 24
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 24
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT381
return == null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT383
return has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT393
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == 0
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT;condition="return == true"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
notifier.fListeners == return.fNotifier.fListeners
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == return.fNotifier.fListeners[]
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == return.fNotifier.fPleaseStop
notifier.fPleaseStop == orig(notifier.fPleaseStop)
return.fNotifier == orig(notifier)
size(notifier.fListeners[]) == size(return.fDescription.fAnnotations[])
size(notifier.fListeners[])-1 == size(return.fDescription.fChildren[])
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.fNotifier has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
return.fDescription.fChildren[] == []
return.fDescription.fChildren[].getClass().getName() == []
return.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fDescription.fAnnotations[] elements != null
return.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == return.fNotifier.fListeners.getClass().getName()
notifier.fListeners.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT264
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.RunBefores.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.RangeTest.class
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != next.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != next.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != next.getClass().getName()
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(next.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(next.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != orig(next.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT84
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.RunBefores.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.RunBefores.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.RunBefores.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(statement.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(statement.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != orig(statement.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != next.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != next.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != next.getClass().getName()
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(next)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fScheduler == null
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
childStatement.getClass().getName() == org.junit.runners.ParentRunner$3.class
org.junit.runners.ParentRunner.this.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != childStatement.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(childStatement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.fListeners == $hidden$2.fListeners
this.val$notifier.fListeners[] == $hidden$2.fListeners[]
this.val$notifier.fPleaseStop == $hidden$2.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$2.fListeners == orig($hidden$2.fListeners)
$hidden$2.fListeners[] == orig($hidden$2.fListeners[])
$hidden$2.fPleaseStop == orig($hidden$2.fPleaseStop)
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
this.val$notifier.fListeners.getClass().getName() == $hidden$2.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$2.fListeners.getClass().getName() == orig($hidden$2.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[] elements != null
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
this.val$each.getClass().getName() != this.val$notifier.fListeners.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$3 has only one value
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
$hidden$2.getClass().getName() != $hidden$3.fListeners.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$notifier == orig($hidden$3)
this.val$notifier.fListeners == $hidden$3.fListeners
this.val$notifier.fListeners[] == $hidden$3.fListeners[]
this.val$notifier.fPleaseStop == $hidden$3.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$3.fListeners == orig($hidden$3.fListeners)
$hidden$3.fListeners[] == orig($hidden$3.fListeners[])
$hidden$3.fPleaseStop == orig($hidden$3.fPleaseStop)
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
this.val$each.getClass().getName() != $hidden$3.fListeners.getClass().getName()
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$3.fListeners.getClass().getName() == orig($hidden$3.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.run():::EXIT
this.val$each == orig(this.val$each)
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
o1.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
org.junit.runners.ParentRunner.this.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != o1.getClass().getName()
o1.getClass().getName() == o2.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
return == 0
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(o1.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(testClass)
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.comparator():::ENTER
===========================================================================
org.junit.runners.ParentRunner.comparator():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.junit.runners.ParentRunner$4.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fChildren[].getClass().getName() one of { [org.junit.runner.Description], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
return.fDisplayName.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
size(return.fChildren[]) one of { 1, 24 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 24 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getName():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getName():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
this.fTestClass == return
this.fTestClass.fClass == return.fClass
this.fTestClass.fMethodsForAnnotations == return.fMethodsForAnnotations
this.fTestClass.fFieldsForAnnotations == return.fFieldsForAnnotations
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fTestClass)
return.fClass == orig(this.fTestClass.fClass)
return.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
return.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
return.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
this.fTestClass.fFieldsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == return.fFieldsForAnnotations.getClass().getName()
return.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::ENTER
this.getClass().getName() != each.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != each.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != each.getClass().getName()
this.fScheduler.getClass().getName() != each.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(each.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(each.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(each.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::ENTER
org.junit.runner.manipulation.Sorter.NULL == sorter
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
this has only one value
this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL == orig(sorter)
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(sorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(sorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != errors.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != errors.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != errors.getClass().getName()
this.fScheduler.getClass().getName() != errors.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(errors.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(errors.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(errors.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.Suite:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this has only one value
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 1
this.fRunners[] elements has only one value
this.fRunners[] elements != null
this.fRunners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
this.fRunners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == java.util.ArrayList.class
this.fTestClass has only one value
this.fTestClass.fClass == null
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations has only one value
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler has only one value
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.fRunners[]) == 1
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.fRunners == orig(runners)
this.fRunners[] == runners[]
this.fTestClass.fClass == orig(klass)
runners[] == orig(runners[])
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == orig(runners.getClass().getName())
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
size(this.fRunners[]) == orig(size(classes[]))
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
child has only one value
child.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
child in this.fRunners[]
this.fRunners[] elements == child
child.getClass().getName() in this.fRunners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(this.fRunners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fRunners[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() == [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description]
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.lang3.RangeTest"
return.fAnnotations has only one value
size(return.fChildren[]) == 24
orig(child) in this.fRunners[]
this.fRunners[] elements == orig(child)
orig(child.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.fRunners == return
this.fRunners[] == return[]
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fRunners)
return[] == orig(this.fRunners[])
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fRunners.getClass().getName() == return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(this.fRunners.getClass().getName())
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
size(this.fRunners[]) == size(notifier.fListeners[])
runner has only one value
runner.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fPleaseStop == false
runner in this.fRunners[]
this.fRunners[] elements == runner
runner.getClass().getName() in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
size(this.fRunners[]) == size(notifier.fListeners[])
size(this.fRunners[]) == orig(size(notifier.fListeners[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fPleaseStop == false
orig(runner) in this.fRunners[]
this.fRunners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == notifier.fListeners.getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fRunners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkField:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field):::ENTER
===========================================================================
org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field):::EXIT
this.fField == orig(field)
===========================================================================
org.junit.runners.model.FrameworkField.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkField.getAnnotations():::EXIT
this.fField == orig(this.fField)
return has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.FrameworkMember:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMember.FrameworkMember():::EXIT
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::ENTER
this.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
members.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != members.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT
members[] == orig(members[])
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return == false
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod$1:::OBJECT
this.val$target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
this.val$params.getClass().getName() == java.lang.Object[].class
this.val$params[] == []
this.val$params[].getClass().getName() == []
this.val$target.getClass().getName() != this.val$params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::ENTER
$hidden$2.getClass().getName() == org.apache.commons.lang3.RangeTest.class
$hidden$3.getClass().getName() == java.lang.Object[].class
$hidden$3[] == []
$hidden$2.getClass().getName() != $hidden$3.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::EXIT
this.val$target == orig($hidden$2)
this.val$params == orig($hidden$3)
this.val$params[] == $hidden$3[]
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
$hidden$3[] == orig($hidden$3[])
$hidden$3[] == []
this.val$target.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$params.getClass().getName() == orig($hidden$3.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::EXIT
this.val$target == orig(this.val$target)
this.val$params == orig(this.val$params)
this.val$params[] == orig(this.val$params[])
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
return == null
this.val$target.getClass().getName() == orig(this.val$target.getClass().getName())
this.val$params.getClass().getName() == orig(this.val$params.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::EXIT
this.fMethod == orig(method)
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] elements != null
size(return[]) one of { 0, 1 }
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::EXIT
this.fMethod == orig(this.fMethod)
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::ENTER
target.getClass().getName() == org.apache.commons.lang3.RangeTest.class
params.getClass().getName() == java.lang.Object[].class
params[] == []
target.getClass().getName() != params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::EXIT
this.fMethod == orig(this.fMethod)
params[] == orig(params[])
params[] == []
return == null
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT
this.fMethod == orig(this.fMethod)
other.fMethod == orig(other.fMethod)
return == false
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == orig(parent)
this.parents has only one value
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents has only one value
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT57
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fMethodsForAnnotations.getClass().getName() == this.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.fClass == orig(klass)
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() != member.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT56
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() != orig(member.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::ENTER
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 1, 24 }
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT129
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT130
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass has only one value)  ==>  (return has only one value)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
this.fClass == return
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return == orig(this.fClass)
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getName():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT109
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "null"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT110
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "org.apache.commons.lang3.RangeTest"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass == null)  <==>  (return.toString == "null")
(this.fClass has only one value)  <==>  (return.toString == "org.apache.commons.lang3.RangeTest")
return.toString one of { "null", "org.apache.commons.lang3.RangeTest" }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
this.fClass == testClass
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fClass == orig(testClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[].getClass().getName() elements == java.lang.Class.class
return[].getClass().getName() one of { [], [java.lang.Class, java.lang.Class] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 2 }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="return == true"
return == true
orig(annotation) has only one value
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="not(return == true)"
return == false
orig(annotation) has only one value
