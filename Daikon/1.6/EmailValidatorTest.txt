===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected has only one value
expected.getClass().getName() == org.apache.commons.validator.routines.EmailValidator.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected has only one value
expected.getClass().getName() == org.apache.commons.validator.routines.EmailValidator.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
junit.framework.Assert.assertFalse(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.AssertionFailedError:::OBJECT
this has only one value
===========================================================================
junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String):::ENTER
message has only one value
message.toString == "\320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204 should validate"
===========================================================================
junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String):::EXIT
message.toString == "\320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204 should validate"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.getName():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testValidator235"
===========================================================================
junit.framework.TestCase.getName():::EXIT
this.fName == return
return == orig(this.fName)
return has only one value
return.toString == "testValidator235"
this.fName.toString == return.toString
return.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
size(result.fErrors[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] elements has only one value
result.fFailures[] elements != null
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fErrors has only one value
result.fErrors != null
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
result.fRunTests >= size(result.fFailures[])
result.fRunTests >= size(result.fErrors[])
size(result.fFailures[]) >= size(result.fErrors[])
size(result.fFailures[]) <= size(result.fListeners[])
size(result.fFailures[])-1 <= size(result.fErrors[])
size(result.fFailures[])-1 >= size(result.fErrors[])-1
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] elements has only one value
result.fFailures[] elements != null
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fErrors has only one value
result.fErrors != null
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests > size(result.fFailures[])
size(result.fFailures[])-1 % result.fRunTests == 0
result.fRunTests >= size(result.fListeners[])
result.fRunTests > orig(size(result.fFailures[]))
orig(result.fRunTests) >= size(result.fFailures[])
orig(result.fRunTests) >= size(result.fErrors[])
size(result.fFailures[]) >= size(result.fErrors[])
size(result.fFailures[]) <= size(result.fListeners[])
size(result.fFailures[]) >= orig(size(result.fFailures[]))
size(result.fFailures[])-1 <= size(result.fErrors[])
size(result.fFailures[])-1 >= size(result.fErrors[])-1
size(result.fFailures[])-1 <= orig(size(result.fFailures[]))
size(result.fFailures[])-1 >= orig(size(result.fFailures[]))-1
size(result.fErrors[]) <= orig(size(result.fFailures[]))
size(result.fErrors[]) >= orig(size(result.fFailures[]))-1
size(result.fErrors[])-1 <= orig(size(result.fFailures[]))-1
size(result.fListeners[]) >= orig(size(result.fFailures[]))
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.toString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testValidator235"
===========================================================================
junit.framework.TestCase.toString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testValidator235"
return has only one value
return.toString == "testValidator235(org.apache.commons.validator.routines.EmailValidatorTest)"
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestFailure:::OBJECT
this has only one value
this.fFailedTest has only one value
this.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fThrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::ENTER
failedTest has only one value
failedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
thrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::EXIT
this.fFailedTest == orig(failedTest)
this.fThrownException == orig(thrownException)
this.fFailedTest.getClass().getName() == orig(failedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.failedTest():::ENTER
===========================================================================
junit.framework.TestFailure.failedTest():::EXIT
this.fFailedTest == return
this.fThrownException == orig(this.fThrownException)
return == orig(this.fFailedTest)
return has only one value
return.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fFailedTest.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.thrownException():::ENTER
===========================================================================
junit.framework.TestFailure.thrownException():::EXIT
this.fFailedTest == orig(this.fFailedTest)
this.fThrownException == return
return == orig(this.fThrownException)
return has only one value
this.fFailedTest.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.trace():::ENTER
===========================================================================
junit.framework.TestFailure.trace():::EXIT
this.fFailedTest == orig(this.fFailedTest)
this.fThrownException == orig(this.fThrownException)
return has only one value
return.toString == "junit.framework.AssertionFailedError: \320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204 should validate\r\n\tat junit.framework.Assert.fail(Assert.java:47)\r\n\tat junit.framework.Assert.assertTrue(Assert.java:20)\r\n\tat org.apache.commons.validator.routines.EmailValidatorTest.testValidator235(EmailValidatorTest.java:158)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.EmailValidatorTest.main(EmailValidatorTest.java:7)\r\n"
this.fFailedTest.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestResult$1:::OBJECT
this.val$test != null
this.val$test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
this.val$test.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1 != null
$hidden$1.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
$hidden$1.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
$hidden$1.fName != null
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] elements has only one value
this.fFailures[] elements != null
this.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
this.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
this.fErrors has only one value
this.fErrors != null
this.fErrors[] == []
this.fErrors[].getClass().getName() == []
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fFailures[]) one of { 0, 1 }
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fErrors[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) >= size(this.fErrors[])
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fErrors[])
size(this.fFailures[])-1 >= size(this.fErrors[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
size(this.fErrors[]) <= size(this.fListeners[])
size(this.fErrors[]) >= size(this.fListeners[])-1
size(this.fErrors[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
===========================================================================
junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::ENTER
this.fFailures[] == this.fErrors[]
size(this.fFailures[]) == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
test has only one value
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
t has only one value
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::EXIT
this.fFailures == orig(this.fFailures)
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fFailures[])
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[]) == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests > size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == size(return[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
size(return[]) == 1
this.fRunTests > size(this.fFailures[])
this.fRunTests >= size(return[])
size(this.fFailures[]) <= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
size(this.fListeners[]) == 1
this.fRunTests > size(this.fFailures[])
size(this.fFailures[])-1 % this.fRunTests == 0
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests > size(this.fFailures[])
size(this.fFailures[])-1 % this.fRunTests == 0
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])-1
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))-1
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[]) == orig(size(this.fListeners[]))
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
this.fFailures[] elements == this.fFailures[return]
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[]) == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fListeners[])
return == orig(size(this.fFailures[]))
return == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
return == 1
this.fFailures[] elements == this.fFailures[return-1]
this.fListeners[] elements == this.fListeners[return-1]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[]) == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
test.fName != null
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests > size(this.fFailures[])
size(this.fFailures[])-1 % this.fRunTests == 0
this.fRunTests >= size(this.fListeners[])
this.fRunTests > orig(size(this.fFailures[]))
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
orig(this.fRunTests) >= size(this.fErrors[])
size(this.fFailures[]) >= orig(size(this.fFailures[]))
size(this.fFailures[])-1 <= orig(size(this.fFailures[]))
size(this.fFailures[])-1 >= orig(size(this.fFailures[]))-1
size(this.fErrors[]) <= orig(size(this.fFailures[]))
size(this.fErrors[]) >= orig(size(this.fFailures[]))-1
size(this.fErrors[])-1 <= orig(size(this.fFailures[]))-1
size(this.fListeners[]) >= orig(size(this.fFailures[]))
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[]) == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fRunTests > size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests > size(this.fFailures[])
size(this.fFailures[])-1 % this.fRunTests == 0
this.fRunTests >= size(this.fListeners[])
this.fRunTests > orig(size(this.fFailures[]))
size(this.fFailures[]) >= orig(size(this.fFailures[]))
size(this.fFailures[])-1 <= orig(size(this.fFailures[]))
size(this.fFailures[])-1 >= orig(size(this.fFailures[]))-1
size(this.fErrors[]) <= orig(size(this.fFailures[]))
size(this.fErrors[]) >= orig(size(this.fFailures[]))-1
size(this.fErrors[])-1 <= orig(size(this.fFailures[]))-1
size(this.fListeners[]) >= orig(size(this.fFailures[]))
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests > size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
orig(this.fRunTests) >= size(this.fErrors[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT165
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT165;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])
size(this.fFailures[]) == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 20
return == false
size(this.fFailures[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.routines.EmailValidatorTest"
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 20
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 20
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
names[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 0, 20 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
return != null
return.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 20 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 20 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 20 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 20 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 20 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.EmailValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 20 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 20 }
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fFailures[])
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])-1
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[]) == orig(size(result.fListeners[]))
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 20
result.fStop == false
size(this.fTests[]) one of { 1, 20 }
size(result.fFailures[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures[] elements == result.fFailures[orig(result.fRunTests)]
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
size(result.fErrors[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] elements has only one value
result.fFailures[] elements != null
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fErrors has only one value
result.fErrors != null
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 20 }
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
result.fRunTests >= size(result.fErrors[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 >= size(result.fErrors[])
size(this.fTests[])-1 != size(result.fListeners[])
size(result.fFailures[]) >= size(result.fErrors[])
size(result.fFailures[]) <= size(result.fListeners[])
size(result.fFailures[])-1 <= size(result.fErrors[])
size(result.fFailures[])-1 >= size(result.fErrors[])-1
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] elements has only one value
result.fFailures[] elements != null
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fErrors has only one value
result.fErrors != null
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 20 }
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fRunTests > orig(result.fRunTests)
result.fRunTests > size(result.fFailures[])
size(result.fFailures[])-1 % result.fRunTests == 0
result.fRunTests >= size(result.fListeners[])
result.fRunTests > orig(size(result.fFailures[]))
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])-1
orig(result.fRunTests) >= size(result.fErrors[])
size(this.fTests[]) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 != size(result.fFailures[])
size(this.fTests[])-1 >= size(result.fFailures[])-1
size(this.fTests[])-1 >= size(result.fErrors[])
size(this.fTests[])-1 != size(result.fListeners[])
size(this.fTests[])-1 >= orig(size(result.fFailures[]))
size(result.fFailures[]) >= size(result.fErrors[])
size(result.fFailures[]) <= size(result.fListeners[])
size(result.fFailures[]) >= orig(size(result.fFailures[]))
size(result.fFailures[])-1 <= size(result.fErrors[])
size(result.fFailures[])-1 >= size(result.fErrors[])-1
size(result.fFailures[])-1 <= orig(size(result.fFailures[]))
size(result.fFailures[])-1 >= orig(size(result.fFailures[]))-1
size(result.fErrors[]) <= orig(size(result.fFailures[]))
size(result.fErrors[]) >= orig(size(result.fFailures[]))-1
size(result.fErrors[])-1 <= orig(size(result.fFailures[]))-1
size(result.fListeners[]) >= orig(size(result.fFailures[]))
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 21 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 20 == 0
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 20 }
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest, org.apache.commons.validator.routines.EmailValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) one of { 1, 20 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::ENTER
line != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString > line.toString
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT314
junit.runner.BaseTestRunner.fgFilterStack == return
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT314;condition="return == true"
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT316
return == false
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT316;condition="not(return == true)"
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
(return == true)  ==>  (junit.runner.BaseTestRunner.fgFilterStack == return)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString > line.toString
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
line.toString == orig(line.toString)
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT;condition="return == true"
junit.runner.BaseTestRunner.fgFilterStack == return
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::ENTER
stack has only one value
stack.toString == "junit.framework.AssertionFailedError: \320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204 should validate\r\n\tat junit.framework.Assert.fail(Assert.java:47)\r\n\tat junit.framework.Assert.assertTrue(Assert.java:20)\r\n\tat org.apache.commons.validator.routines.EmailValidatorTest.testValidator235(EmailValidatorTest.java:158)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.EmailValidatorTest.main(EmailValidatorTest.java:7)\r\n"
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::EXIT294
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
stack.toString == "junit.framework.AssertionFailedError: \320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204 should validate\r\n\tat junit.framework.Assert.fail(Assert.java:47)\r\n\tat junit.framework.Assert.assertTrue(Assert.java:20)\r\n\tat org.apache.commons.validator.routines.EmailValidatorTest.testValidator235(EmailValidatorTest.java:158)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.EmailValidatorTest.main(EmailValidatorTest.java:7)\r\n"
return has only one value
return.toString == "junit.framework.AssertionFailedError: \320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204 should validate\r\n\tat org.apache.commons.validator.routines.EmailValidatorTest.testValidator235(EmailValidatorTest.java:158)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat org.apache.commons.validator.daikon.EmailValidatorTest.main(EmailValidatorTest.java:7)\r\n"
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
stack.toString == orig(stack.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key.toString one of { "filterstack", "maxmessage" }
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
key.toString one of { "filterstack", "maxmessage" }
return.toString == "true"
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
key.toString == orig(key.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::ENTER
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == return
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::ENTER
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT299
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT299;condition="not(return == true)"
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT;condition="not(return == true)"
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::ENTER
this.fColumn == 2
test has only one value
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
t has only one value
===========================================================================
junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 20
runTime == 15368
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 20
return has only one value
return.toString == "15.368"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 20
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 15368
size(result.fFailures[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[]) == orig(size(result.fListeners[]))
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 20
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int):::ENTER
this.fColumn == 20
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
booBoo.fThrownException has only one value
count == 1
===========================================================================
junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 20
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int):::ENTER
this.fColumn == 20
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
booBoo.fThrownException has only one value
count == 1
===========================================================================
junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 20
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):::ENTER
this.fColumn == 20
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 20
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 20
booBoos.getClass().getName() == java.util.Vector$1.class
count one of { 0, 1 }
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
type.toString == "error"
orig(booBoos) has only one value
orig(count) == 0
orig(type) has only one value
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT63
type.toString == "failure"
orig(booBoos) has only one value
orig(count) == 1
orig(type) has only one value
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
(type.toString == "error")  <==>  (orig(count) == 0)
(type.toString == "failure")  <==>  (orig(count) == 1)
this.fColumn == 20
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 20
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[]) == orig(size(result.fListeners[]))
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 20
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 20
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[]) == orig(size(result.fListeners[]))
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 20
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 20
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[]) == orig(size(result.fListeners[]))
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 20
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fFailures[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 20
runTime == 15368
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 20
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.validator.routines.EmailValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 20 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])-1
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 1
return.fFailures[] elements has only one value
return.fFailures[].getClass().getName() == [junit.framework.TestFailure]
return.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
return.fErrors has only one value
return.fErrors[] == []
return.fErrors[].getClass().getName() == []
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 20
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures[] elements == return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])-1
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 1
return.fFailures[] elements has only one value
return.fFailures[].getClass().getName() == [junit.framework.TestFailure]
return.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
return.fErrors has only one value
return.fErrors[] == []
return.fErrors[].getClass().getName() == []
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 20
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures[] elements == return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 20
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 20
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])-1
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT] == return.fFailures[junit.textui.TestRunner.FAILURE_EXIT-1]
return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT] == return.fListeners[junit.textui.TestRunner.FAILURE_EXIT-1]
return has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 1
return.fFailures[] elements has only one value
return.fFailures[].getClass().getName() == [junit.framework.TestFailure]
return.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
return.fErrors has only one value
return.fErrors[] == []
return.fErrors[].getClass().getName() == []
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 20
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures[] elements == return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.ResultPair:::OBJECT
this.item != null
===========================================================================
org.apache.commons.validator.ResultPair.ResultPair(java.lang.String, boolean):::ENTER
item != null
===========================================================================
org.apache.commons.validator.ResultPair.ResultPair(java.lang.String, boolean):::EXIT
this.item == orig(item)
this.valid == orig(valid)
this.item.toString == item.toString
item.toString == orig(item.toString)
===========================================================================
org.apache.commons.validator.daikon.EmailValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.EmailValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.routines.DomainValidator$IDNBUGHOLDER.keepsTrailingDot():::EXIT
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator$IDNBUGHOLDER.keepsTrailingDot():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator:::CLASS
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[]
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[]
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[]
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName()
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY has only one value
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY != null
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == []
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[].getClass().getName() == []
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[].toString == []
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?"
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == "\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() == [java.lang.String]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString == [arpa]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString elements == "arpa"
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] contains no nulls and has only one value, of length 1234
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString == [aaa, aarp, abarth, abb, abbott, abbvie, abc, able, abogado, abudhabi, academy, accenture, accountant, accountants, aco, active, actor, adac, ads, adult, aeg, aero, aetna, afamilycompany, afl, agakhan, agency, aig, aigo, airbus, airforce, airtel, akdn, alfaromeo, alibaba, alipay, allfinanz, allstate, ally, alsace, alstom, americanexpress, americanfamily, amex, amfam, amica, amsterdam, analytics, android, anquan, anz, aol, apartments, app, apple, aquarelle, aramco, archi, army, art, arte, asda, asia, associates, athleta, attorney, auction, audi, audible, audio, auspost, author, auto, autos, avianca, aws, axa, azure, baby, baidu, banamex, bananarepublic, band, bank, bar, barcelona, barclaycard, barclays, barefoot, bargains, baseball, basketball, bauhaus, bayern, bbc, bbt, bbva, bcg, bcn, beats, beauty, beer, bentley, berlin, best, bestbuy, bet, bharti, bible, bid, bike, bing, bingo, bio, biz, black, blackfriday, blanco, blockbuster, blog, bloomberg, blue, bms, bmw, bnl, bnpparibas, boats, boehringer, bofa, bom, bond, boo, book, booking, boots, bosch, bostik, boston, bot, boutique, box, bradesco, bridgestone, broadway, broker, brother, brussels, budapest, bugatti, build, builders, business, buy, buzz, bzh, cab, cafe, cal, call, calvinklein, cam, camera, camp, cancerresearch, canon, capetown, capital, capitalone, car, caravan, cards, care, career, careers, cars, cartier, casa, case, caseih, cash, casino, cat, catering, catholic, cba, cbn, cbre, cbs, ceb, center, ceo, cern, cfa, cfd, chanel, channel, chase, chat, cheap, chintai, chloe, christmas, chrome, chrysler, church, cipriani, circle, cisco, citadel, citi, citic, city, cityeats, claims, cleaning, click, clinic, clinique, clothing, cloud, club, clubmed, coach, codes, coffee, college, cologne, com, comcast, commbank, community, company, compare, computer, comsec, condos, construction, consulting, contact, contractors, cooking, cookingchannel, cool, coop, corsica, country, coupon, coupons, courses, credit, creditcard, creditunion, cricket, crown, crs, cruise, cruises, csc, cuisinella, cymru, cyou, dabur, dad, dance, data, date, dating, datsun, day, dclk, dds, deal, dealer, deals, degree, delivery, dell, deloitte, delta, democrat, dental, dentist, desi, design, dev, dhl, diamonds, diet, digital, direct, directory, discount, discover, dish, diy, dnp, docs, doctor, dodge, dog, doha, domains, dot, download, drive, dtv, dubai, duck, dunlop, duns, dupont, durban, dvag, dvr, earth, eat, eco, edeka, edu, education, email, emerck, energy, engineer, engineering, enterprises, epost, epson, equipment, ericsson, erni, esq, estate, esurance, eurovision, eus, events, everbank, exchange, expert, exposed, express, extraspace, fage, fail, fairwinds, faith, family, fan, fans, farm, farmers, fashion, fast, fedex, feedback, ferrari, ferrero, fiat, fidelity, fido, film, final, finance, financial, fire, firestone, firmdale, fish, fishing, fit, fitness, flickr, flights, flir, florist, flowers, fly, foo, food, foodnetwork, football, ford, forex, forsale, forum, foundation, fox, free, fresenius, frl, frogans, frontdoor, frontier, ftr, fujitsu, fujixerox, fun, fund, furniture, futbol, fyi, gal, gallery, gallo, gallup, game, games, gap, garden, gbiz, gdn, gea, gent, genting, george, ggee, gift, gifts, gives, giving, glade, glass, gle, global, globo, gmail, gmbh, gmo, gmx, godaddy, gold, goldpoint, golf, goo, goodhands, goodyear, goog, google, gop, got, gov, grainger, graphics, gratis, green, gripe, group, guardian, gucci, guge, guide, guitars, guru, hair, hamburg, hangout, haus, hbo, hdfc, hdfcbank, health, healthcare, help, helsinki, here, hermes, hgtv, hiphop, hisamitsu, hitachi, hiv, hkt, hockey, holdings, holiday, homedepot, homegoods, homes, homesense, honda, honeywell, horse, hospital, host, hosting, hot, hoteles, hotmail, house, how, hsbc, htc, hughes, hyatt, hyundai, ibm, icbc, ice, icu, ieee, ifm, ikano, imamat, imdb, immo, immobilien, industries, infiniti, info, ing, ink, institute, insurance, insure, int, intel, international, intuit, investments, ipiranga, irish, iselect, ismaili, ist, istanbul, itau, itv, iveco, iwc, jaguar, java, jcb, jcp, jeep, jetzt, jewelry, jio, jlc, jll, jmp, jnj, jobs, joburg, jot, joy, jpmorgan, jprs, juegos, juniper, kaufen, kddi, kerryhotels, kerrylogistics, kerryproperties, kfh, kia, kim, kinder, kindle, kitchen, kiwi, koeln, komatsu, kosher, kpmg, kpn, krd, kred, kuokgroup, kyoto, lacaixa, ladbrokes, lamborghini, lamer, lancaster, lancia, lancome, land, landrover, lanxess, lasalle, lat, latino, latrobe, law, lawyer, lds, lease, leclerc, lefrak, legal, lego, lexus, lgbt, liaison, lidl, life, lifeinsurance, lifestyle, lighting, like, lilly, limited, limo, lincoln, linde, link, lipsy, live, living, lixil, loan, loans, locker, locus, loft, lol, london, lotte, lotto, love, lpl, lplfinancial, ltd, ltda, lundbeck, lupin, luxe, luxury, macys, madrid, maif, maison, makeup, man, management, mango, market, marketing, markets, marriott, marshalls, maserati, mattel, mba, mcd, mcdonalds, mckinsey, med, media, meet, melbourne, meme, memorial, men, menu, meo, metlife, miami, microsoft, mil, mini, mint, mit, mitsubishi, mlb, mls, mma, mobi, mobile, mobily, moda, moe, moi, mom, monash, money, monster, montblanc, mopar, mormon, mortgage, moscow, moto, motorcycles, mov, movie, movistar, msd, mtn, mtpc, mtr, museum, mutual, nab, nadex, nagoya, name, nationwide, natura, navy, nba, nec, net, netbank, netflix, network, neustar, new, newholland, news, next, nextdirect, nexus, nfl, ngo, nhk, nico, nike, nikon, ninja, nissan, nissay, nokia, northwesternmutual, norton, now, nowruz, nowtv, nra, nrw, ntt, nyc, obi, observer, off, office, okinawa, olayan, olayangroup, oldnavy, ollo, omega, one, ong, onl, online, onyourside, ooo, open, oracle, orange, org, organic, orientexpress, origins, osaka, otsuka, ott, ovh, page, pamperedchef, panasonic, panerai, paris, pars, partners, parts, party, passagens, pay, pccw, pet, pfizer, pharmacy, philips, phone, photo, photography, photos, physio, piaget, pics, pictet, pictures, pid, pin, ping, pink, pioneer, pizza, place, play, playstation, plumbing, plus, pnc, pohl, poker, politie, porn, post, pramerica, praxi, press, prime, pro, prod, productions, prof, progressive, promo, properties, property, protection, pru, prudential, pub, pwc, qpon, quebec, quest, qvc, racing, radio, raid, read, realestate, realtor, realty, recipes, red, redstone, redumbrella, rehab, reise, reisen, reit, reliance, ren, rent, rentals, repair, report, republican, rest, restaurant, review, reviews, rexroth, rich, richardli, ricoh, rightathome, ril, rio, rip, rmit, rocher, rocks, rodeo, rogers, room, rsvp, ruhr, run, rwe, ryukyu, saarland, safe, safety, sakura, sale, salon, samsclub, samsung, sandvik, sandvikcoromant, sanofi, sap, sapo, sarl, sas, save, saxo, sbi, sbs, sca, scb, schaeffler, schmidt, scholarships, school, schule, schwarz, science, scjohnson, scor, scot, seat, secure, security, seek, select, sener, services, ses, seven, sew, sex, sexy, sfr, shangrila, sharp, shaw, shell, shia, shiksha, shoes, shop, shopping, shouji, show, showtime, shriram, silk, sina, singles, site, ski, skin, sky, skype, sling, smart, smile, sncf, soccer, social, softbank, software, sohu, solar, solutions, song, sony, soy, space, spiegel, spot, spreadbetting, srl, srt, stada, staples, star, starhub, statebank, statefarm, statoil, stc, stcgroup, stockholm, storage, store, stream, studio, study, style, sucks, supplies, supply, support, surf, surgery, suzuki, swatch, swiftcover, swiss, sydney, symantec, systems, tab, taipei, talk, taobao, target, tatamotors, tatar, tattoo, tax, taxi, tci, tdk, team, tech, technology, tel, telecity, telefonica, temasek, tennis, teva, thd, theater, theatre, tiaa, tickets, tienda, tiffany, tips, tires, tirol, tjmaxx, tjx, tkmaxx, tmall, today, tokyo, tools, top, toray, toshiba, total, tours, town, toyota, toys, trade, trading, training, travel, travelchannel, travelers, travelersinsurance, trust, trv, tube, tui, tunes, tushu, tvs, ubank, ubs, uconnect, unicom, university, uno, uol, ups, vacations, vana, vanguard, vegas, ventures, verisign, versicherung, vet, viajes, video, vig, viking, villas, vin, vip, virgin, visa, vision, vista, vistaprint, viva, vivo, vlaanderen, vodka, volkswagen, volvo, vote, voting, voto, voyage, vuelos, wales, walmart, walter, wang, wanggou, warman, watch, watches, weather, weatherchannel, webcam, weber, website, wed, wedding, weibo, weir, whoswho, wien, wiki, williamhill, win, windows, wine, winners, wme, wolterskluwer, woodside, work, works, world, wow, wtc, wtf, xbox, xerox, xfinity, xihuan, xin, xn--11b4c3d, xn--1ck2e1b, xn--1qqw23a, xn--30rr7y, xn--3bst00m, xn--3ds443g, xn--3oq18vl8pn36a, xn--3pxu8k, xn--42c2d9a, xn--45q11c, xn--4gbrim, xn--55qw42g, xn--55qx5d, xn--5su34j936bgsg, xn--5tzm5g, xn--6frz82g, xn--6qq986b3xl, xn--80adxhks, xn--80aqecdr1a, xn--80asehdb, xn--80aswg, xn--8y0a063a, xn--90ae, xn--9dbq2a, xn--9et52u, xn--9krt00a, xn--b4w605ferd, xn--bck1b9a5dre4c, xn--c1avg, xn--c2br7g, xn--cck2b3b, xn--cg4bki, xn--czr694b, xn--czrs0t, xn--czru2d, xn--d1acj3b, xn--eckvdtc9d, xn--efvy88h, xn--estv75g, xn--fct429k, xn--fhbei, xn--fiq228c5hs, xn--fiq64b, xn--fjq720a, xn--flw351e, xn--fzys8d69uvgm, xn--g2xx48c, xn--gckr3f0f, xn--gk3at1e, xn--hxt814e, xn--i1b6b1a6a2e, xn--imr513n, xn--io0a7i, xn--j1aef, xn--jlq61u9w7b, xn--jvr189m, xn--kcrx77d1x4a, xn--kpu716f, xn--kput3i, xn--mgba3a3ejt, xn--mgba7c0bbn0a, xn--mgbab2bd, xn--mgbb9fbpob, xn--mgbca7dzdo, xn--mgbi4ecexp, xn--mgbt3dhd, xn--mk1bu44c, xn--mxtq1m, xn--ngbc5azd, xn--ngbe9e0a, xn--nqv7f, xn--nqv7fs00ema, xn--nyqy26a, xn--p1acf, xn--pbt977c, xn--pssy2u, xn--q9jyb4c, xn--qcka1pmc, xn--rhqv96g, xn--rovu88b, xn--ses554g, xn--t60b56a, xn--tckwe, xn--tiq49xqyj, xn--unup4y, xn--vermgensberater-ctb, xn--vermgensberatung-pwb, xn--vhquv, xn--vuq861b, xn--w4r85el8fhu5dnra, xn--w4rs40l, xn--xhq521b, xn--zfr164b, xperia, xxx, xyz, yachts, yahoo, yamaxun, yandex, yodobashi, yoga, yokohama, you, youtube, yun, zappos, zara, zero, zip, zippo, zone, zuerich]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] contains no nulls and has only one value, of length 293
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString == [ac, ad, ae, af, ag, ai, al, am, ao, aq, ar, as, at, au, aw, ax, az, ba, bb, bd, be, bf, bg, bh, bi, bj, bm, bn, bo, br, bs, bt, bv, bw, by, bz, ca, cc, cd, cf, cg, ch, ci, ck, cl, cm, cn, co, cr, cu, cv, cw, cx, cy, cz, de, dj, dk, dm, do, dz, ec, ee, eg, er, es, et, eu, fi, fj, fk, fm, fo, fr, ga, gb, gd, ge, gf, gg, gh, gi, gl, gm, gn, gp, gq, gr, gs, gt, gu, gw, gy, hk, hm, hn, hr, ht, hu, id, ie, il, im, in, io, iq, ir, is, it, je, jm, jo, jp, ke, kg, kh, ki, km, kn, kp, kr, kw, ky, kz, la, lb, lc, li, lk, lr, ls, lt, lu, lv, ly, ma, mc, md, me, mg, mh, mk, ml, mm, mn, mo, mp, mq, mr, ms, mt, mu, mv, mw, mx, my, mz, na, nc, ne, nf, ng, ni, nl, no, np, nr, nu, nz, om, pa, pe, pf, pg, ph, pk, pl, pm, pn, pr, ps, pt, pw, py, qa, re, ro, rs, ru, rw, sa, sb, sc, sd, se, sg, sh, si, sj, sk, sl, sm, sn, so, sr, st, su, sv, sx, sy, sz, tc, td, tf, tg, th, tj, tk, tl, tm, tn, to, tr, tt, tv, tw, tz, ua, ug, uk, us, uy, uz, va, vc, ve, vg, vi, vn, vu, wf, ws, xn--3e0b707e, xn--45brj9c, xn--54b7fta0cc, xn--80ao21a, xn--90a3ac, xn--90ais, xn--clchc0ea0b2g2a9gcd, xn--d1alf, xn--e1a4c, xn--fiqs8s, xn--fiqz9s, xn--fpcrj9c3d, xn--fzc2c9e2c, xn--gecrj9c, xn--h2brj9c, xn--j1amh, xn--j6w193g, xn--kprw13d, xn--kpry57d, xn--l1acc, xn--lgbbat1ad8j, xn--mgb9awbf, xn--mgba3a4f16a, xn--mgbaam7a8h, xn--mgbayh7gpa, xn--mgbbh1a71e, xn--mgbc0a9azcg, xn--mgberp4a5d4ar, xn--mgbpl2fh, xn--mgbtx2b, xn--mgbx4cd0ab, xn--mix891f, xn--node, xn--o3cw4h, xn--ogbpf8fl, xn--p1ai, xn--pgbs0dh, xn--qxam, xn--s9brj9c, xn--wgbh1c, xn--wgbl6a, xn--xkc2al3hye2a, xn--xkc2dl3a5ee0h, xn--y9a3aq, xn--yfro4i67o, xn--ygbi2ammx, ye, yt, za, zm, zw]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].getClass().getName() == [java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString == [localdomain, localhost]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString elements one of { "localdomain", "localhost" }
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == true
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == 1234
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == 293
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) == 2
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]) == 1
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH] has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH-1] has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH] has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH-1] has only one value
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() (elementwise)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() (elementwise)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() (elementwise)
===========================================================================
org.apache.commons.validator.routines.DomainValidator:::OBJECT
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == this.domainRegex.patterns[].getClass().getName()
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.domainRegex.patterns[])
size(this.domainRegex.patterns[]) == size(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.inUse == true
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements != null
this.domainRegex != null
this.domainRegex.patterns != null
this.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.domainRegex.patterns[] elements != null
this.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.hostnameRegex != null
this.hostnameRegex.patterns != null
this.hostnameRegex.patterns[] elements != null
size(this.domainRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() != this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == this.domainRegex.patterns[].getClass().getName() (elementwise)
this.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.DomainValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.DomainValidator(boolean):::EXIT
this.allowLocal == orig(allowLocal)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::ENTER
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == true
sortedArray != null
sortedArray[] elements != null
key != null
org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH != size(sortedArray[])
org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH != size(sortedArray[])-1
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == sortedArray.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.serialVersionUID < size(sortedArray[])-1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < key.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < key.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < key.toString
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) <= size(sortedArray[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])-1 <= size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) >= size(sortedArray[])
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])-1 != size(sortedArray[])
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])-1 >= size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) != size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])-1 != size(sortedArray[])
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) != size(sortedArray[])-1
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT2063
org.apache.commons.validator.routines.DomainValidator.inUse == return
orig(size(sortedArray[])) one of { 2, 293, 1234 }
key.toString in sortedArray[].toString
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) <= size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) <= orig(size(sortedArray[]))
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT2063;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT2064
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) != size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) != orig(size(sortedArray[]))
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT2064;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
sortedArray[] == orig(sortedArray[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) != size(sortedArray[])-1)
(return == false)  ==>  (size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) != orig(size(sortedArray[])))
(return == true)  ==>  (key.toString in sortedArray[].toString)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
(return == true)  ==>  (orig(size(sortedArray[])) one of { 2, 293, 1234 })
(return == true)  ==>  (size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) <= size(sortedArray[])-1)
(return == true)  ==>  (size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) <= orig(size(sortedArray[])))
org.apache.commons.validator.routines.DomainValidator.inUse == true
sortedArray[] elements != null
org.apache.commons.validator.routines.DomainValidator.MAX_DOMAIN_LENGTH != size(sortedArray[])-1
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(sortedArray.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.serialVersionUID < size(sortedArray[])-1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < key.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < key.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < key.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < size(sortedArray[])-1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
key.toString == orig(key.toString)
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) <= orig(size(sortedArray[]))
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])-1 <= size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) >= orig(size(sortedArray[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])-1 >= size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])-1 != orig(size(sortedArray[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) != size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])-1 != orig(size(sortedArray[]))
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) != size(sortedArray[])-1
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.inUse == return
orig(size(sortedArray[])) one of { 2, 293, 1234 }
key.toString in sortedArray[].toString
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) <= size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) <= orig(size(sortedArray[]))
===========================================================================
org.apache.commons.validator.routines.DomainValidator.arrayContains(java.lang.String[], java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) != size(sortedArray[])-1
size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) != orig(size(sortedArray[]))
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
str != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT261
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(str)
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
return != null
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
str.toString == return.toString
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT135
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == return
org.apache.commons.validator.routines.DomainValidator.inUse == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT137
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
return.allowLocal == orig(allowLocal)
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(return.domainRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(return.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(return.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(return.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
(return.allowLocal == false)  <==>  (return.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == false)  <==>  (return.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns)
(return.allowLocal == true)  <==>  (return.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == true)  <==>  (return.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == return)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == return.domainRegex)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == return.domainRegex.patterns)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == return.hostnameRegex)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == return.hostnameRegex.patterns)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse))
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return.allowLocal)
(return.allowLocal == true)  ==>  (orig(org.apache.commons.validator.routines.DomainValidator.inUse) == true)
org.apache.commons.validator.routines.DomainValidator.inUse == true
return != null
return.domainRegex != null
return.domainRegex.patterns != null
return.domainRegex.patterns[] elements != null
return.hostnameRegex != null
return.hostnameRegex.patterns != null
return.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::ENTER
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == true
input != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != input.toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT2049
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
input.toString one of { "?data-workshop.com", "\320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204" }
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT2049;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT2052
org.apache.commons.validator.routines.DomainValidator.inUse == return
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT2052;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
(return == false)  ==>  (input.toString one of { "?data-workshop.com", "\320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204" })
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
org.apache.commons.validator.routines.DomainValidator.inUse == true
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.inUse == return
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isOnlyASCII(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
input.toString one of { "?data-workshop.com", "\320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204" }
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
domain != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT166
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == true)  ==>  (domain == orig(domain))
(return == true)  ==>  (domain.toString == orig(domain.toString))
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < orig(domain.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < orig(domain.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT166;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT166;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT168
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.inUse
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.inUse == return
org.apache.commons.validator.routines.DomainValidator.inUse == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
domain.toString == "localhost"
orig(this) has only one value
orig(domain) has only one value
domain.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString
domain.toString == orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT168;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT169
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
orig(this) has only one value
domain.toString == orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT169;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[])
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == true)  ==>  (domain == orig(domain))
(return == true)  ==>  (domain.toString == orig(domain.toString))
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < orig(domain.toString))
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < orig(domain.toString))
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < orig(domain.toString))
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != orig(domain.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != orig(domain.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != orig(domain.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.inUse == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < domain.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < domain.toString
domain.toString == orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
this has only one value
this.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT241
org.apache.commons.validator.routines.DomainValidator.inUse == return
ccTld.toString == "xn--p1ai"
orig(ccTld) has only one value
ccTld.toString in org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT241;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT242
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT242;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(this.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
(return == false)  ==>  (this.allowLocal == return)
(return == true)  ==>  (ccTld.toString == "xn--p1ai")
(return == true)  ==>  (ccTld.toString in org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
(return == true)  ==>  (orig(ccTld) has only one value)
this.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
ccTld.toString == orig(ccTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.inUse == return
ccTld.toString == "xn--p1ai"
orig(ccTld) has only one value
ccTld.toString in org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
this has only one value
this.allowLocal == false
gTld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT228
org.apache.commons.validator.routines.DomainValidator.inUse == return
gTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT228;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT229
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT229;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(this.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
(return == false)  ==>  (this.allowLocal == return)
(return == true)  ==>  (gTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
this.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
gTld.toString == orig(gTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.inUse == return
gTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
this has only one value
this.allowLocal == false
iTld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
return == false
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
iTld.toString == orig(iTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.inUse
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
this has only one value
lTld has only one value
lTld.toString == "localdomain"
lTld.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.inUse
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == return
org.apache.commons.validator.routines.DomainValidator.inUse == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
lTld.toString == "localdomain"
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
lTld.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
lTld.toString == orig(lTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
tld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT200
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.inUse
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.inUse == return
org.apache.commons.validator.routines.DomainValidator.inUse == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
tld.toString == "localdomain"
orig(this) has only one value
orig(tld) has only one value
tld.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT200;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT202
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT202;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT203
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.inUse == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
this.allowLocal == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT203;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == size(this.hostnameRegex.patterns[])-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(this.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(this.hostnameRegex.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[])
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.inUse == return)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
tld.toString == orig(tld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.inUse == return
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.unicodeToASCII(java.lang.String):::ENTER
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == true
input != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != input.toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.unicodeToASCII(java.lang.String):::EXIT2000
return == orig(input)
input.toString == return.toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.unicodeToASCII(java.lang.String):::EXIT2005
input.toString == "\320\277\321\200\320\265\320\267\320\270\320\264\320\265\320\275\321\202.\321\200\321\204"
return has only one value
return.toString == "xn--g7q670bs9eca4028ah5cm7b4a457y.xn--xs2ak"
orig(input) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.unicodeToASCII(java.lang.String):::EXIT2027
return == orig(input)
input.toString == "?data-workshop.com"
return has only one value
input.toString == return.toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.unicodeToASCII(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus)
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.inUse == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.inUse)
org.apache.commons.validator.routines.DomainValidator.inUse == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType == orig(org.apache.commons.validator.routines.DomainValidator.$SWITCH_TABLE$org$apache$commons$validator$routines$DomainValidator$ArrayType)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))-1
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
org.apache.commons.validator.routines.DomainValidator.inUse == true
return != null
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsPlus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.countryCodeTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.genericTLDsMinus.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != return.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != return.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != input.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != return.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
input.toString >= return.toString
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator:::CLASS
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS has only one value
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS != null
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == "\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]"
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS has only one value
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS != null
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == "(\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]"
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER has only one value
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER != null
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == "(\"(\\\\\"|[^\"])*\")"
org.apache.commons.validator.routines.EmailValidator.WORD has only one value
org.apache.commons.validator.routines.EmailValidator.WORD != null
org.apache.commons.validator.routines.EmailValidator.WORD.toString == "(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]|')+|(\"(\\\\\"|[^\"])*\"))"
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == "^\\s*?(.+)@(.+?)\\s*$"
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX has only one value
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX != null
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == "^\\[(.*)\\]$"
org.apache.commons.validator.routines.EmailValidator.USER_REGEX has only one value
org.apache.commons.validator.routines.EmailValidator.USER_REGEX != null
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == "^\\s*(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]|')+|(\"(\\\\\"|[^\"])*\"))(\\.(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]|')+|(\"(\\\\\"|[^\"])*\")))*$"
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN != null
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN has only one value
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN != null
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN has only one value
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == false
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == true
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator:::OBJECT
===========================================================================
org.apache.commons.validator.routines.EmailValidator.EmailValidator(boolean, boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.EmailValidator.EmailValidator(boolean, boolean):::EXIT
this.allowLocal == orig(allowLocal)
this.allowTld == orig(allowTld)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance():::EXIT
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean):::EXIT
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
return.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean, boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean, boolean):::EXIT105
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(allowLocal)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean, boolean):::EXIT109
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(allowTld)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean, boolean):::EXIT111
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(allowTld)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.getInstance(boolean, boolean):::EXIT
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
return.allowLocal == orig(allowLocal)
return.allowTld == orig(allowTld)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::ENTER
email != null
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString != email.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT163
this.allowLocal == return
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(this.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
email.toString one of { "andy.noble@data-workshop.com.", "jsmith@apache." }
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT163;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT169
this.allowLocal == return
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(this.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
email.toString one of { "foo\nbar@domain.com", "foo\rbar@domain.com" }
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT169;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT173
this.allowLocal == return
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(this.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
return == false
orig(this) has only one value
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < email.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT173;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT177
this.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
return == false
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString < email.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT177;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT180
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld == return
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
return == true
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT180;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.allowLocal == orig(this.allowLocal)
this.allowTld == orig(this.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < email.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < email.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.WORD.toString < email.toString)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString != email.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
email.toString == orig(email.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld == return
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
return == true
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
return == false
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < email.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < email.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::ENTER
domain != null
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString != domain.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT196
this.allowLocal == this.allowTld
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld
this.allowLocal == orig(this.allowTld)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld == return
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
this.allowLocal == false
domain.toString == "[216.109.118.76]"
return == true
orig(this) has only one value
orig(domain) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT196;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT202
this.allowLocal == return
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
this.allowTld == true
domain.toString == ".com"
return == false
orig(this) has only one value
orig(domain) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT202;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT203
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal
this.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld == return
return == orig(this.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
this.allowLocal == false
domain.toString == "com"
return == true
orig(this) has only one value
orig(domain) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT203;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT204
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal
this.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
this.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this))
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.allowTld == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.WORD.toString < domain.toString)
this.allowTld == false
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT204;condition="return == true"
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < domain.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString < domain.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < domain.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString < domain.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT204;condition="not(return == true)"
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
return == orig(this.allowTld)
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.allowLocal == orig(this.allowLocal)
this.allowTld == orig(this.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < domain.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.WORD.toString < domain.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString != domain.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
domain.toString == orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld == return
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
return == true
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < domain.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < domain.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < domain.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidDomain(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
return == false
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::ENTER
user != null
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString != user.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT217
this.allowLocal == return
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(this.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
user.toString one of { "Loremipsumdolorsitametconsecteturadipiscingelit.Nullavitaeligulamattisrhoncusnuncegestasmattisleo.Donecnonsapieninmagnatristiquedictumaacturpis.Fusceorciduifacilisisutsapieneuconsequatpharetralectus.Quisqueenimestpulvinarutquamvitaeportamattisex.Nullamquismaurisplaceratconvallisjustoquisportamauris.Innullalacusconvalliseufringillautvenenatissitametdiam.Maecenasluctusligulascelerisquepulvinarfeugiat.Sedmolestienullaaliquetorciluctusidpharetranislfinibus.Suspendissemalesuadatinciduntduisitametportaarcusollicitudinnec.Donecetmassamagna.Curabitururnadiampretiumveldignissimporttitorfringillaeuneque.Duisantetelluspharetraidtinciduntinterdummolestiesitametfelis.Utquisquamsitametantesagittisdapibusacnonodio.Namrutrummolestiediamidmattis.Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus.Morbiposueresedmetusacconsectetur.Etiamquisipsumvitaejustotempusmaximus.Sedultriciesplaceratvolutpat.Integerlacuslectusmaximusacornarequissagittissitametjusto.Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus.Maecenasindictumpurussedrutrumex.Nullafacilisi.Integerfinibusfinibusmietpharetranislfaucibusvel.Maecenasegetdolorlacinialobortisjustovelullamcorpersem.Vivamusaliquetpurusidvariusornaresapienrisusrutrumnisitinciduntmollissemnequeidmetus.Etiamquiseleifendpurus.Nuncfelisnuncscelerisqueiddignissimnecfinibusalibero.Nuncsemperenimnequesitamethendreritpurusfacilisisac.Maurisdapibussemperfelisdignissimgravida.Aeneanultricesblanditnequealiquamfinibusodioscelerisqueac.Aliquamnecmassaeumaurisfaucibusfringilla.Etiamconsequatligulanisisitametaliquamnibhtemporquis.Nuncinterdumdignissimnullaatsodalesarcusagittiseu.Proinpharetrametusneclacuspulvinarsedvolutpatliberoornare.Sedligulanislpulvinarnonlectuseublanditfacilisisante.Sedmollisnislalacusauctorsuscipit.Inhachabitasseplateadictumst.Phasellussitametvelittemporvenenatisfeliseuegestasrisus.Aliquameteratsitametnibhcommodofinibus.Morbiefficiturodiovelpulvinariaculis.Aeneantemporipsummassaaconsecteturturpisfaucibusultrices.Praesentsodalesmaurisquisportafermentum.Etiamnisinislvenenatisvelauctorutullamcorperinjusto.Proinvelligulaerat.Phasellusvestibulumgravidamassanonfeugiat.Maecenaspharetraeuismodmetusegetefficitur.Suspendisseamet", "john56789.john56789.john56789.john56789.john56789.john56789.john5" }
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT217;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT220
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < user.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < user.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.WORD.toString < user.toString)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.allowTld == false)
(return == false)  ==>  (this.allowTld == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT220;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT220;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.allowLocal == orig(this.allowLocal)
this.allowTld == orig(this.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < user.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < user.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.EmailValidator.WORD.toString < user.toString)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.allowTld == false)
(return == false)  ==>  (this.allowTld == return)
(return == true)  ==>  (org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString != user.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
user.toString == orig(user.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld == return
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
return == true
===========================================================================
org.apache.commons.validator.routines.EmailValidator.isValidUser(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
this.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal == return
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld == return
return == orig(this.allowLocal)
return == orig(this.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
return == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
return == false
orig(this) has only one value
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < user.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < user.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < user.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest:::CLASS
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY has only one value
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY != null
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == "emailForm"
org.apache.commons.validator.routines.EmailValidatorTest.ACTION has only one value
org.apache.commons.validator.routines.EmailValidatorTest.ACTION != null
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == "email"
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl has only one value
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl != null
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == org.apache.commons.validator.ResultPair[].class
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] contains no nulls and has only one value, of length 65
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] elements != null
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item contains no nulls and has only one value, of length 65
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item elements != null
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item.toString == [abigail@example.com, abigail@example.com ,  abigail@example.com, abigail @example.com , *@example.net, "\""@foo.bar, fred&barny@example.com, ---@example.com, foo-bar@example.net, "127.0.0.1"@[127.0.0.1], Abigail <abigail@example.com>, Abigail<abigail@example.com>, Abigail<@a,@b,@c:abigail@example.com>, "This is a phrase"<abigail@example.com>, "Abigail "<abigail@example.com>, "Joe & J. Harvey" <example @Org>, Abigail <abigail @ example.com>, Abigail made this <  abigail   @   example  .    com    >, Abigail(the bitch)@example.com, Abigail <abigail @ example . (bar) com >, Abigail < (one)  abigail (two) @(three)example . (bar) com (quz) >, Abigail (foo) (((baz)(nested) (comment)) ! ) < (one)  abigail (two) @(three)example . (bar) com (quz) >, Abigail <abigail(fo\(o)@example.com>, Abigail <abigail(fo\)o)@example.com> , (foo) abigail@example.com, abigail@example.com (foo), "Abi\"gail" <abigail@example.com>, abigail@[example.com], abigail@[exa\[ple.com], abigail@[exa\]ple.com], ":sysmail"@  Some-Group. Some-Org, Muhammed.(I am  the greatest) Ali @(the)Vegas.WBA, mailbox.sub1.sub2@this-domain, sub-net.mailbox@sub-domain.domain, name:;, ':;, name:   ;, Alfred Neuman <Neuman@BBN-TENEXA>, Neuman@BBN-TENEXA, "George, Ted" <Shared@Group.Arpanet>, Wilt . (the  Stilt) Chamberlain@NBA.US, Cruisers:  Port@Portugal, Jones@SEA;, $@[], *()@[], "quoted ( brackets" ( a comment )@example.com, "Joe & J. Harvey"\x0D\x0A     <ddd\@ Org>, "Joe &\x0D\x0A J. Harvey" <ddd \@ Org>, Gourmets:  Pompous Person <WhoZiWhatZit\@Cordon-Bleu>,\x0D\x0A        Childs\@WGBH.Boston, "Galloping Gourmet"\@\x0D\x0A        ANT.Down-Under (Australian National Television),\x0D\x0A        Cheapie\@Discount-Liquors;,    Just a string, string, (comment), ()@example.com, fred(&)barny@example.com, fred\ barny@example.com, Abigail <abi gail @ example.com>, Abigail <abigail(fo(o)@example.com>, Abigail <abigail(fo)o)@example.com>, "Abi"gail" <abigail@example.com>, abigail@[exa]ple.com], abigail@[exa[ple.com], abigail@[exaple].com], abigail@, @example.com, phrase: abigail@example.com abigail@example.com ;, invalid???char@example.com]
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
size(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[]) == 65
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest:::OBJECT
org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN == size(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])-1
this.validator.allowLocal == this.validator.allowTld
this.validator.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
this.validator.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN].valid == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS has only one value
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS != null
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == "\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]"
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS has only one value
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS != null
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == "(\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]"
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER has only one value
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER != null
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == "(\"(\\\\\"|[^\"])*\")"
org.apache.commons.validator.routines.EmailValidator.WORD has only one value
org.apache.commons.validator.routines.EmailValidator.WORD != null
org.apache.commons.validator.routines.EmailValidator.WORD.toString == "(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]|')+|(\"(\\\\\"|[^\"])*\"))"
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == "^\\s*?(.+)@(.+?)\\s*$"
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX has only one value
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX != null
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == "^\\[(.*)\\]$"
org.apache.commons.validator.routines.EmailValidator.USER_REGEX has only one value
org.apache.commons.validator.routines.EmailValidator.USER_REGEX != null
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == "^\\s*(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]|')+|(\"(\\\\\"|[^\"])*\"))(\\.(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)<>@,;:'\\\\\\\"\\.\\[\\]]|')+|(\"(\\\\\"|[^\"])*\")))*$"
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN != null
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN has only one value
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN != null
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN has only one value
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN != null
this.validator.allowLocal == false
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == false
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD has only one value
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD != null
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == true
this.fName != null
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN] has only one value
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1] has only one value
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN].item has only one value
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].item has only one value
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN].valid == false
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString > org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.WORD.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.WORD.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < this.fName.toString
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString < this.fName.toString
this.validator.allowLocal in org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal in org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld in org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.EmailValidatorTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.EmailValidatorTest(java.lang.String):::EXIT
this.fName == orig(name)
this.validator == null
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString < name.toString
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString < name.toString
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.setUp():::ENTER
this.validator == null
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.setUp():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString > orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString > orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString < orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString < orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString < orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString < orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString < orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString < orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString < orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString < orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString < orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString > orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal) in org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid
orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld) in org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
this.fName.toString > orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.tearDown():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.tearDown():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmail():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmail"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmail():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmail"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailAtTLD():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailAtTLD"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailAtTLD():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailAtTLD"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailExtension():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailExtension"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailExtension():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailExtension"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailLocalhost():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailLocalhost"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailLocalhost():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailLocalhost"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailUserName():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailUserName"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailUserName():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailUserName"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithBogusCharacter():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithBogusCharacter"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithBogusCharacter():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithBogusCharacter"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithCommas():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithCommas"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithCommas():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithCommas"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithControlChars():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithControlChars"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithControlChars():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithControlChars"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithDash():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithDash"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithDash():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithDash"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithDotEnd():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithDotEnd"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithDotEnd():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithDotEnd"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithNumericAddress():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithNumericAddress"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithNumericAddress():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithNumericAddress"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithSlashes():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithSlashes"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithSlashes():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithSlashes"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithSpaces():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testEmailWithSpaces"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testEmailWithSpaces():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEmailWithSpaces"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testVALIDATOR_278():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testVALIDATOR_278"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testVALIDATOR_278():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testVALIDATOR_278"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testVALIDATOR_315():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testVALIDATOR_315"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testVALIDATOR_315():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testVALIDATOR_315"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator293():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testValidator293"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator293():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testValidator293"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator359():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testValidator359"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator359():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testValidator359"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator365():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testValidator365"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator365():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testValidator365"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator374():::ENTER
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
this has only one value
this.fName has only one value
this.fName.toString == "testValidator374"
===========================================================================
org.apache.commons.validator.routines.EmailValidatorTest.testValidator374():::EXIT
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION)
this.validator == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER)
org.apache.commons.validator.routines.EmailValidator.WORD == orig(org.apache.commons.validator.routines.EmailValidator.WORD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX)
org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_PATTERN)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_PATTERN)
org.apache.commons.validator.routines.EmailValidator.USER_PATTERN == orig(org.apache.commons.validator.routines.EmailValidator.USER_PATTERN)
this.validator.allowTld == org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(this.validator.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN-1].valid
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[post(org.apache.commons.validator.routines.EmailValidator.MAX_USERNAME_LEN)-1].valid)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowLocal)
org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_TLD.allowTld == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD.allowTld)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[] == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[])
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].item)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl[].valid)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testValidator374"
org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.FORM_KEY.toString)
org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString == orig(org.apache.commons.validator.routines.EmailValidatorTest.ACTION.toString)
org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.routines.EmailValidator.VALID_CHARS.toString)
org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString == orig(org.apache.commons.validator.routines.EmailValidator.QUOTED_USER.toString)
org.apache.commons.validator.routines.EmailValidator.WORD.toString == orig(org.apache.commons.validator.routines.EmailValidator.WORD.toString)
org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.EMAIL_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.IP_DOMAIN_REGEX.toString)
org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString == orig(org.apache.commons.validator.routines.EmailValidator.USER_REGEX.toString)
org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName() == orig(org.apache.commons.validator.routines.EmailValidatorTest.testEmailFromPerl.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator:::CLASS
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX has only one value
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$"
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] elements has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator:::OBJECT
this == org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == this.ipv4Validator
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == this.ipv4Validator.patterns
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() == this.ipv4Validator.patterns[].getClass().getName()
this has only one value
this.ipv4Validator has only one value
this.ipv4Validator.patterns has only one value
this.ipv4Validator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.ipv4Validator.patterns[] contains no nulls and has only one value, of length 1
this.ipv4Validator.patterns[] elements has only one value
this.ipv4Validator.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.ipv4Validator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.ipv4Validator.patterns[]) == 1
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == this.ipv4Validator.patterns.getClass().getName()
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[] (elementwise)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] is the reverse of this.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() == this.ipv4Validator.patterns[].getClass().getName() (elementwise)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.InetAddressValidator():::EXIT
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.getInstance():::EXIT
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == return
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == return.ipv4Validator
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == return.ipv4Validator.patterns
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == return.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[])
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == return.ipv4Validator.patterns.getClass().getName()
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::ENTER
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
inetAddress has only one value
inetAddress.toString == "216.109.118.76"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT79
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT79;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(this.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(this.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[])
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(this.ipv4Validator.patterns[])
inetAddress.toString == "216.109.118.76"
return == true
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName())
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(this.ipv4Validator.patterns.getClass().getName())
inetAddress.toString == orig(inetAddress.toString)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::ENTER
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
inet4Address has only one value
inet4Address.toString == "216.109.118.76"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT118
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT118;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(this.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(this.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[])
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(this.ipv4Validator.patterns[])
inet4Address.toString == "216.109.118.76"
return == true
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName())
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(this.ipv4Validator.patterns.getClass().getName())
inet4Address.toString == orig(inet4Address.toString)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::OBJECT
this.patterns != null
this.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.patterns[] elements != null
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::ENTER
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::EXIT
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::ENTER
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
caseSensitive == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::EXIT
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::ENTER
regexs.getClass().getName() == java.lang.String[].class
regexs[].toString elements one of { "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
caseSensitive == true
size(regexs[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::EXIT
regexs[] == orig(regexs[])
size(this.patterns[]) == orig(size(regexs[]))
regexs[].toString elements one of { "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?\\.)+(\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?)\\.?$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::ENTER
this has only one value
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
value has only one value
value.toString == "localhost"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT147
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT147;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
value.toString == "localhost"
return == true
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::ENTER
value != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT173
return != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT176
return == null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(return[]) one of { 1, 4 }
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < size(return[])-1
this.patterns.getClass().getName() != return.getClass().getName()
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
size(this.patterns[]) <= size(return[])
size(this.patterns[]) != size(return[])-1
size(this.patterns[])-1 <= size(return[])-1
